Volume conecte_me_postgres_data  Removing
Volume conecte_me_media_data  Removing
Volume conecte_me_es_data  Removing
Volume conecte_me_postgres_data  Removed
Volume conecte_me_media_data  Removed
Volume conecte_me_es_data  Removed
.
├── backend
│   ├── conecte_me_backend
│   │   ├── __init__.py
│   │   ├── __pycache__
│   │   │   ├── __init__.cpython-310.pyc
│   │   │   ├── settings.cpython-310.pyc
│   │   │   └── urls.cpython-310.pyc
│   │   ├── settings.py
│   │   ├── urls.py
│   │   └── wsgi.py
│   ├── Dockerfile
│   ├── logs
│   │   └── django.log
│   ├── manage.py
│   ├── media
│   │   └── profile_pictures
│   │       └── default_avatar.png
│   ├── oauth_app
│   │   ├── __init__.py
│   │   ├── migrations
│   │   │   ├── 0001_initial.py
│   │   │   ├── 0002_user42_email_address_user42_first_name_and_more.py
│   │   │   ├── 0003_user42_is_2fa_enabled_user42_totp_secret.py
│   │   │   ├── 0004_alter_user42_totp_secret.py
│   │   │   ├── 0005_user42_profile_image.py
│   │   │   ├── __init__.py
│   │   │   └── __pycache__
│   │   │       ├── 0001_initial.cpython-310.pyc
│   │   │       ├── 0002_user42_email_address_user42_first_name_and_more.cpython-310.pyc
│   │   │       ├── 0003_user42_is_2fa_enabled_user42_totp_secret.cpython-310.pyc
│   │   │       ├── 0004_alter_user42_totp_secret.cpython-310.pyc
│   │   │       ├── 0005_user42_profile_image.cpython-310.pyc
│   │   │       └── __init__.cpython-310.pyc
│   │   ├── models.py
│   │   ├── output.log
│   │   ├── __pycache__
│   │   │   ├── __init__.cpython-310.pyc
│   │   │   ├── models.cpython-310.pyc
│   │   │   ├── tests.cpython-310.pyc
│   │   │   ├── twofa_views.cpython-310.pyc
│   │   │   ├── urls.cpython-310.pyc
│   │   │   ├── utils.cpython-310.pyc
│   │   │   └── views.cpython-310.pyc
│   │   ├── templates
│   │   │   └── 2fa_setup.html
│   │   ├── tests.py
│   │   ├── twofa_views.py
│   │   ├── urls.py
│   │   ├── utils.py
│   │   └── views.py
│   └── requirements.txt
├── certs
│   ├── localhost.crt
│   └── localhost.key
├── docker-compose.yml
├── elk
│   ├── elasticsearch
│   │   └── elasticsearch.yml
│   ├── filebeat.yml
│   ├── kibana
│   │   └── kibana.yml
│   └── logstash
│       ├── logstash.conf
│       └── logstash.yml
├── frontend
│   ├── Dockerfile
│   ├── game_interface.html
│   ├── game_setup.html
│   ├── index.html
│   ├── login.html
│   ├── privacy.html
│   ├── signin42.html
│   ├── signup.html
│   ├── static
│   │   ├── css
│   │   │   ├── login.css
│   │   │   ├── main.css
│   │   │   └── signup.css
│   │   ├── img
│   │   │   ├── 42_logo.png
│   │   │   ├── Game_anime.png
│   │   │   ├── PONG_Accueil.png
│   │   │   ├── PONG_seul.png
│   │   │   ├── return_arrow.png
│   │   │   ├── Symbole_return.png
│   │   │   └── User_title.png
│   │   └── js
│   │       ├── 2fa.js
│   │       ├── game.js
│   │       ├── login.js
│   │       ├── main.js
│   │       ├── signin42.js
│   │       ├── signup.js
│   │       └── user.js
│   ├── stats_page.html
│   ├── team.html
│   ├── terms.html
│   └── user.html
├── nginx.conf
├── output.log
└── README.md

21 directories, 80 files
# nginx.conf
events {
    worker_connections 1024;
}

http {
    # Éviter les attaques MIME type
    include       mime.types;
    default_type  application/octet-stream;

    # Log minimal
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;

    # Serveur HTTPS local
    server {
        listen 443 ssl;
        server_name localhost;

        # Emplacements des certificats
        ssl_certificate     /etc/nginx/certs/localhost.crt;
        ssl_certificate_key /etc/nginx/certs/localhost.key;

        # SSL Settings (versions / ciphers minimales)
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # --- Nouveaux blocs pour servir privacy.html et terms.html ---
        location = /privacy.html {
            proxy_pass http://conecteme_frontend:80/privacy.html;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

        location = /terms.html {
            proxy_pass http://conecteme_frontend:80/terms.html;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

        # Proxy pass vers votre container frontend
        location / {
            # Redirection du trafic principal vers le frontend (port 80)
            proxy_pass http://conecteme_frontend:80;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

        # Redirection spécifique pour la route /auth/signup/
        location /auth/signup/ {
            proxy_pass http://conecteme_backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

        location /auth/42/ {
            proxy_pass http://conecteme_backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

        # NOUVEAU : LOGIN
        location /auth/login/ {
            proxy_pass http://conecteme_backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-For $remote_addr;
        }        

        # Bloc pour les routes 2FA
        location /auth/2fa/ {
            proxy_pass http://conecteme_backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

        # --- Bloc pour servir les fichiers médias ---
        location /media/ {
            alias /app/media/;
            # Assurez-vous que le volume "media" est bien monté dans le container Nginx
        }

        location /auth/user/ {
            proxy_pass http://conecteme_backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

                # Bloc pour protéger l'accès à Kibana
        #location /kibana/ {
         #   auth_basic "Zone réservée aux administrateurs";
          #  auth_basic_user_file /etc/nginx/kibana_htpasswd;

            # Redirige les requêtes vers le service Kibana qui tourne sur le port 5601
#            proxy_pass http://conecteme_kibana:5601/;
 #           proxy_set_header Host $host;
  #          proxy_set_header X-Real-IP $remote_addr;
   #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #    }


    }
}# Django
SECRET_KEY=change_me_in_production
DEBUG=1

# PostgreSQL
POSTGRES_DB=conecteme_db
POSTGRES_USER=conecteme_user
POSTGRES_PASSWORD=conecteme_password
POSTGRES_HOST=db
POSTGRES_PORT=5432

# OAuth 42
OAUTH42_WEBSITE=https://localhost:8443
OAUTH42_CLIENT_ID=u-s4t2ud-212adcc9d7bcdde9f1b4072ac7e13a17ce8c3493475514c9c139b3f993a243a6
OAUTH42_CLIENT_SECRET=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
OAUTH42_REDIRECT_URI=https://localhost:8443/auth/42/callback
OAUTH42_AUTH_URL=https://api.intra.42.fr/oauth/authorize
OAUTH42_TOKEN_URL=https://api.intra.42.fr/oauth/token
OAUTH42_USER_URL=https://api.intra.42.fr/v2/me

# Elasticsearch
ELASTICSEARCH_URL=http://elasticsearch:9200
ELASTICSEARCH_USERNAME=elastic
ELASTICSEARCH_PASSWORD=changeme

# Kibana
#KIBANA_USER=kibana
#KIBANA_PASSWORD=changeme

FROM nginx:alpine

WORKDIR /usr/share/nginx/html
COPY *.html .
COPY static ./static

# Nginx par défaut écoute sur le port 80
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <title>Profil utilisateur - ft_transcendence</title>
  <!-- Bootstrap CSS -->
  <link 
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" 
    rel="stylesheet"
  />
  <!-- Bootstrap Icons -->
  <link 
    rel="stylesheet" 
    href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"
  />

  <style>
    /* -------------------------------------------------------------
       Fonts (adaptez selon vos chemins)
    ------------------------------------------------------------- */
    @font-face {
      font-family: 'Pong-Game';
      src: url('static/fonts/PongGame.woff2') format('woff2'),
           url('static/fonts/PongGame.woff') format('woff');
      font-weight: normal;
      font-style: normal;
    }
    @font-face {
      font-family: 'NotoSymbols';
      src: url('static/fonts/NotoSansSymbols-Regular.ttf') format('truetype');
    }

    /* -------------------------------------------------------------
       Reset box-sizing
    ------------------------------------------------------------- */
    *,
    *::before,
    *::after {
      box-sizing: border-box;
    }

    /* -------------------------------------------------------------
       Body : fond + centrage
    ------------------------------------------------------------- */
    body {
      margin: 0;
      padding: 0;
      font-family: 'Cantarell', sans-serif;

      min-height: 100vh;
      overflow-y: auto; /* on scrolle si trop grand */
      
      background: linear-gradient(135deg, #0f172a, #1e293b);
      color: #f1f5f9;
    }

    .main-container {
      position: relative;
      width: 95%;
      max-width: 1200px;
      margin: 2rem auto;  /* centrage horizontal + marge verticale */
      position: relative; /* si vous avez besoin de position:relative */
    }

    /* -------------------------------------------------------------
       Header : flèche retour, Titre PONG, icône user (top-right)
    ------------------------------------------------------------- */
    .header-bar {
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 2rem;
    }
    .back-btn {
      position: absolute;
      left: 0;
      top: 50%;
      transform: translateY(-50%);
      background: rgba(30, 41, 59, 0.8);
      border: 1px solid rgba(51, 65, 85, 0.5);
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: background-color 0.3s, border-color 0.3s, transform 0.3s;
    }
    .back-btn:hover {
      background: rgba(30, 41, 59, 0.9);
      border-color: rgba(51, 65, 85, 0.75);
      transform: translateY(-50%) scale(1.05);
    }

    .title {
      font-family: "Pong-Game", sans-serif;
      margin: 0;
      font-size: 4rem;
      font-weight: bold;
      background: linear-gradient(
        to bottom, 
        #3b82f6, 
        #2563eb,
        #1e3a8a
      );
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      -webkit-text-fill-color: transparent;
      text-shadow: 0 0 15px rgba(59, 130, 246, 0.3);
      letter-spacing: 15px;
      text-align: center;
    }

    .top-user-icon {
      position: absolute;
      right: 0;
      top: 50%;
      transform: translateY(-50%);
      font-size: 1.8rem;
      cursor: pointer;
      opacity: 0.8;
      transition: opacity 0.3s;
    }
    .top-user-icon:hover {
      opacity: 1;
    }

    /* -------------------------------------------------------------
       Carte principale (Avatar + Player name + Stats)
    ------------------------------------------------------------- */
    .main-card {
      background: rgba(30, 41, 59, 0.4);
      border-radius: 12px;
      padding: 1.5rem;
      margin-bottom: 2rem;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    /* Conteneur principal (pour le positionnement de l'icône) */
    .avatar-bubble {
      position: relative;
      width: 96px;
      height: 96px;
      background-color: rgba(15, 23, 42, 0.5);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 3rem;
      color: #f1f5f9;
      margin: 0 auto 1rem; /* centré, marge en bas */
      /* Ne pas utiliser overflow: hidden ici, pour que l'icône puisse dépasser */
    }

    /* Conteneur dédié à l'image qui va être masquée */
    .avatar-image {
      width: 100%;
      height: 100%;
      border-radius: 50%;
      overflow: hidden; /* l'image sera clipée dans un cercle */
    }

    .avatar-image img {
      width: 100%;
      height: 100%;
      object-fit: cover; /* l'image couvre tout le conteneur sans déformation */
    }

    .camera-icon {
        position: absolute;
        bottom: 0;
        right: 0;
        width: 28px;
        height: 28px;
        background: rgba(30, 41, 59, 0.9);
        border: 1px solid rgba(51,65,85,0.7);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #f1f5f9;
        font-size: 1rem;
        cursor: pointer;      /* Important : curseur clic */
        transition: transform 0.3s;
        border: none;         /* si c’est un <button>, vous pouvez forcer l’absence de style */
        outline: none;
    }

    .camera-icon:hover {
        transform: scale(1.5);
    }

    .camera-icon:focus {
        outline: 2px solid rgba(59,130,246,0.5); /* Pour l’accessibilité focus */
    }

    .player-name {
      font-size: 1.3rem;
      font-weight: 600;
      margin: 0;
      text-align: center;
    }
    .player-status {
        font-size: 0.9rem;
        opacity: 0.8;
        text-align: center;
        margin-bottom: 1rem;

        color: #60a5fa;  /* Couleur demandée */
    }

    /* Stats en 4 blocs, mais left-align (label au-dessus, value en dessous) */
    .stats-row {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      justify-content: space-between;
    }
    .stat-item {
      flex: 1 1 calc(25% - 1rem); /* 4 items sur une ligne */
      min-width: 120px;
      background: rgba(53, 63, 87, 0.5);
      border-radius: 8px;
      padding: 1rem;
      margin-bottom: 1rem;
    }
    .stat-label {
      font-size: 0.85rem;
      opacity: 0.8;
      margin: 0;
      text-align: left; /* Gauche */
    }

    .stat-value {
        font-size: 1.2rem;
        font-weight: 600;
        margin-top: 0.2rem;
        color: #fff;
        text-align: left; /* Gauche */
    }

    .stat-value.highlight-value {
        color: #60a5fa; /* force la couleur bleue */
    }

    /* -------------------------------------------------------------
       Bloc “Sécurité”
    ------------------------------------------------------------- */
    .security-card {
      background: rgba(30, 41, 59, 0.4);
      border-radius: 12px;
      padding: 1rem;
      margin-bottom: 2rem;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }
    .security-card h5 {
      font-size: 1rem;
      margin-bottom: 1rem;
    }
    .security-item {
      background: rgba(53, 63, 87, 0.5);

      border-radius: 8px;
      padding: 0.8rem 1rem;
      margin-bottom: 0.8rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
      cursor: pointer;
      transition: background-color 0.2s, border-color 0.3s;
    }
    .security-item:hover {
      background: rgba(51, 72, 120, 0.6);
      border-color: rgba(51,65,85,0.7);
      color: #f1f5f9;
    }

    .security-left {
      display: flex;
      align-items: center;
      gap: 0.6rem;
    }
    .security-left i {
      font-size: 1.1rem;
      opacity: 0.9;
    }
    .security-right {
      font-size: 0.9rem;
      opacity: 0.6;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    /* -------------------------------------------------------------
       Bloc “Logs de connexion”
    ------------------------------------------------------------- */
    .logs-card {
      background: rgba(30, 41, 59, 0.4);
      border-radius: 12px;
      padding: 1rem;
      margin-bottom: 2rem;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }
    .logs-card h5 {
      font-size: 1rem;
      margin-bottom: 1rem;
    }

    .logs-table {
      width: 100%;
      border-collapse: collapse; /* Permet de gérer les bordures de façon fine */
      background-color: #192434; /* Fond global, si voulu */
    }

    /* On enlève toutes les bordures par défaut sur th & td */
    .logs-table th,
    .logs-table td {
      border: none; 
      padding: 0.8rem;
      font-size: 0.9rem;
      color: #f1f5f9;
      background: rgba(30, 41, 59, 0.4); /* Couleur de fond pour chaque cellule */
    }

    /* On ne veut pas de lignes verticales → pas de border-left/border-right. 
      Mais on veut de fines lignes horizontales internes,
      sauf la toute première (au-dessus du thead) et la toute dernière (après le dernier <tr>). */

    /* Ligne horizontale sous l’en‐tête (thead) */
    .logs-table thead tr th {
      border-bottom: 1px solid rgba(255,255,255,0.2);
    }

    /* Lignes horizontales entre les rangées du tbody 
      (on en met une border-bottom sur chaque <tr> du tbody, 
        sauf le dernier). */
    .logs-table tbody tr {
      border-bottom: 1px solid rgba(255,255,255,0.2);
    }

    /* On supprime la ligne horizontale après la dernière rangée */
    .logs-table tbody tr:last-child {
      border-bottom: none;
    }

    /* Style de base pour les badges de statut */
    .status-badge {
      display: inline-block;
      padding: 4px 10px;        /* Ajustez si vous voulez un badge plus ou moins grand */
      border-radius: 9999px;    /* donne un aspect “pill” très arrondi */
      font-size: 0.8rem;        /* taille du texte */
      font-weight: 600;         /* texte un peu gras */
      text-align: center;
      min-width: 60px;          /* optionnel, pour un badge d’au moins 60px de large */
    }

    /* Couleurs pour “Active” */
    .status-active {
      background-color: #22395f; /* Fond #22395f */
      color: #83b0e6;            /* Texte #83b0e6 */
    }

    /* Couleurs pour “Inactive” */
    .status-inactive {
      background-color: #2a364a; /* Fond #2a364a */
      color: #9ba5b4;            /* Texte #9ba5b4 */
    }

    /* Pour l'image à l'intérieur du bouton "back-btn" */
    .back-btn img.arrow-icon {
      width: 24px;
      height: 24px;
      /* object-fit: contain;  <-- facultatif si tu veux être sûr que l’image ne soit pas déformée */
    }

    /* -----------------------
       Email form container
    -------------------------*/
    .email-form-container {
      max-height: 0;
      opacity: 0;
      overflow: hidden;
      transition: max-height 0.5s ease, opacity 0.5s ease;
    }
    
    #password-toggle.open {
      margin-bottom: 0;              /* retire la marge inférieure quand c'est ouvert */
      border-bottom-left-radius: 0;  /* retire l'arrondi */
      border-bottom-right-radius: 0; /* retire l'arrondi */
    }

    .email-form-container.open {
      max-height: 500px;          /* hauteur ouverte */
      opacity: 1;                 /* visible */
      margin-top: 0;              /* plus de marge en haut */
      margin-bottom: 1rem;        /* marge en bas (si vous en voulez) */
      background: rgba(53, 63, 87, 0.5);
      border-bottom-right-radius: 8px;
      border-bottom-left-radius: 8px;
      border-top-left-radius: 0;  /* pour aligner avec l’item ouvert */
      border-top-right-radius: 0; /* idem */
      padding: 1.3rem 1.618rem;
    }

    /* Rotation de l’icône */
    .rotate {
      transform: rotate(180deg);
      transition: transform 0.3s ease;
    }

    .password-form-container {
      max-height: 0;
      opacity: 0;
      overflow: hidden;
      transition: max-height 0.5s ease, opacity 0.5s ease;
    }

    .password-form-container.open {
      max-height: 400px;       /* ou 500px, selon la hauteur voulue */
      opacity: 1;
      margin-top: 0;           /* on retire la marge au-dessus pour coller au toggle */
      margin-bottom: 1rem;     /* marge en bas, si vous voulez */
      background: rgba(53, 63, 87, 0.5);
      border-bottom-right-radius: 8px;
      border-bottom-left-radius: 8px;
      border-top-left-radius: 0;  /* pour aligner avec l’item ouvert */
      border-top-right-radius: 0; /* idem */
      padding: 1.3rem 1.618rem;
    }

    /* Animation pour le toggle 2FA */
    #twofa-btn i {
      transition: color 0.3s ease, transform 0.3s ease;
    }

    #twofa-icon {
      font-size: 2rem; /* Augmentez la valeur (ex: 2rem, 3rem, etc.) selon vos besoins */
    }

    #email-toggle.open {
      margin-bottom: 0;
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
    }

    
  </style>
</head>
<body>
  <div class="main-container">

    <!-- Barre supérieure : flèche retour + Titre + user icon -->
    <div class="header-bar">
      <!-- Bouton retour -->
      <div class="back-btn">
        <button class="back-btn" onclick="history.back()">
            <img src="static/img/return_arrow.png" alt="Retour" class="arrow-icon"/>
            </button>
            <!-- Titre PONG -->
        </div>
        <h1 class="title">USER</h1>
    </div>

    <!-- Carte principale (Profil + Stats) -->
    <div class="main-card">
      
      <!-- Bloc avatar -->
      <div class="avatar-bubble">
        <div class="avatar-image">
          <img id="profile-image" src="{% static 'img/default-avatar.png' %}" alt="User Profile">
        </div>
        <!-- Bouton pour déclencher la sélection d'image -->
        <button type="button" class="camera-icon">
          <i class="bi bi-camera-fill"></i>
        </button>
        <!-- Input file caché -->
        <input type="file" id="avatar-upload" accept="image/*" style="display: none;">
      </div>

      <!-- Nom + statut -->
      <h2 class="player-name">Loading...</h2>
      <div class="player-status">Online</div>

      <!-- Stats en 4 blocs, alignés à gauche -->
      <div class="stats-row">
        <!-- Classement Elo -->
        <div class="stat-item">
          <p class="stat-label">Classement Elo</p>
          <div class="stat-value">1850</div>
        </div>
        <!-- Parties totales -->
        <div class="stat-item">
          <p class="stat-label">Parties totales</p>
          <div class="stat-value">70</div>
        </div>
        <!-- Victoires -->
        <div class="stat-item">
          <p class="stat-label">Victoires</p>
          <div class="stat-value highlight-value">42</div>
        </div>
        <!-- Défaites -->
        <div class="stat-item">
          <p class="stat-label">Défaites</p>
          <div class="stat-value">28</div>
        </div>
      </div>

    </div>

    <!-- Section Sécurité -->
    <div class="security-card mb-4">
      <h5 class="mb-3">Sécurité</h5>

      <!-- Item 1 : Ajouter/Changer Email -->
      <div class="security-item" id="email-toggle">
        <div class="security-left">
          <i class="bi bi-envelope"></i>
          <span>Ajouter/Changer : Email</span>
        </div>
        <div class="security-right">
          <i class="bi bi-chevron-down" id="email-chevron"></i>
        </div>
      </div>

      <!-- Conteneur du formulaire d'email (caché par défaut) -->
      <div id="email-form-container" class="email-form-container">
        <form id="email-form" novalidate class="mb-3">
          <div class="mb-3">
            <label for="old-email" class="form-label">Ancien Email</label>
            <input type="email" id="old-email" class="form-control" placeholder="user@example.com" required>
          </div>
          <div class="mb-3">
            <label for="new-email" class="form-label">Nouveau Email</label>
            <input type="email" id="new-email" class="form-control" placeholder="Entrez votre nouvel email" required>
            <div class="invalid-feedback">
              Veuillez entrer un email valide.
            </div>
          </div>
          <div class="mb-3">
            <label for="confirm-email" class="form-label">Confirmation Email</label>
            <input type="email" id="confirm-email" class="form-control" placeholder="Confirmez votre nouvel email" required>
            <div class="invalid-feedback">
              Les emails ne correspondent pas.
            </div>
          </div>
          <!-- Nouveau champ pour le mot de passe -->
          <div class="mb-3">
            <label for="email-password" class="form-label">Mot de passe</label>
            <input type="password" id="email-password" class="form-control" placeholder="Votre mot de passe" required>
            <div class="invalid-feedback">
              Mot de passe requis.
            </div>
          </div>
          <button type="submit" class="btn btn-primary">
            <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
            Valider
          </button>
        </form>
      </div>
      

      <!-- Item 2 : Changer le mot de passe -->
      <div class="security-item" id="password-toggle">
        <div class="security-left">
          <i class="bi bi-key"></i>
          <span>Changer le mot de passe</span>
        </div>
        <div class="security-right">
          <i class="bi bi-chevron-down" id="password-chevron"></i>
        </div>
      </div>

      <!-- Conteneur du formulaire du mot de passe (caché par défaut) -->
      <div id="password-form-container" class="password-form-container">
        <form id="password-form" novalidate class="mb-3">
          <div class="mb-3">
            <label for="old-password" class="form-label">Ancien mot de passe</label>
            <input type="password" id="old-password" class="form-control" placeholder="•••••••">
          </div>
          <div class="mb-3">
            <label for="new-password" class="form-label">Nouveau mot de passe</label>
            <input type="password" id="new-password" class="form-control" placeholder="•••••••">
            <div class="invalid-feedback">
              Veuillez entrer un mot de passe valide.
            </div>
          </div>
          <div class="mb-3">
            <label for="confirm-password" class="form-label">Confirmation</label>
            <input type="password" id="confirm-password" class="form-control" placeholder="•••••••">
            <div class="invalid-feedback">
              Les mots de passe ne correspondent pas.
            </div>
          </div>
          <button type="submit" class="btn btn-primary">
            <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
            Valider
          </button>
        </form>
      </div>


    <!-- Section 2FA dans la sécurité -->
    <div class="security-item" id="twofa-toggle">
      <div class="security-left">
        <i class="bi bi-shield"></i>
        <span>Two-factor authentication (2FA)</span>
      </div>
      <div class="security-right">
        <!-- Bouton toggle avec icône initiale "toggle off" en rouge -->
        <button id="twofa-btn" class="btn btn-link p-0" tabindex="0" aria-label="Activer 2FA">
          <i id="twofa-icon" class="bi bi-toggle-off text-danger"></i>
        </button>
      </div>
    </div>


    <!-- Section Logs de connexion -->
    <div class="logs-card">
      <h5 class="mb-3"><i class="bi bi-activity"></i> Logs de connexion</h5>
      <!-- Conteneur “table-responsive” -->
      <div class="table-responsive">
        <table class="logs-table">
            <thead>
            <tr>
                <th>Date</th>
                <th>Plateforme</th>
                <th>Navigateur</th>
                <th>Adresse IP</th>
                <th>Statut</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td>January 12, 2025</td>
                <td>Linux</td>
                <td>Chrome</td>
                <td>62.210.32.164</td>
                <td><span class="status-badge status-active">Active</span></td>
            </tr>
            <tr>
                <td>January 11, 2025</td>
                <td>Linux</td>
                <td>Chrome</td>
                <td>2001:e34:…:38e</td>
                <td><span class="status-badge status-active">Active</span></td>
            </tr>
            <tr>
                <td>January 10, 2025</td>
                <td>Windows</td>
                <td>Firefox</td>
                <td>82.45.128.91</td>
                <td><span class="status-badge status-inactive">Inactive</span></td>
            </tr>
            </tbody>
        </table>
    </div>
  </div>

  <!-- Bootstrap JS -->
  <script 
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js">
  </script>
  <script src="static/js/main.js"></script>
  <script src="static/js/user.js"></script>
</body>
</html>document.addEventListener('DOMContentLoaded', () => {
  // ------------------------------
  // Fonctionnalité avatar (existante)
  // ------------------------------
  const cameraBtn = document.querySelector('.camera-icon');
  const avatarInput = document.getElementById('avatar-upload');
  const profileImage = document.getElementById('profile-image');

  cameraBtn.addEventListener('click', () => {
    avatarInput.click();
  });

  avatarInput.addEventListener('change', (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const allowedTypes = ['image/jpeg', 'image/png'];
    if (!allowedTypes.includes(file.type)) {
      alert("Format d'image non supporté. Seul JPEG et PNG sont autorisés.");
      return;
    }
    if (file.size > 2 * 1024 * 1024) {
      alert("La taille de l'image ne doit pas dépasser 2MB.");
      return;
    }

    const reader = new FileReader();
    reader.onload = function(event) {
      profileImage.src = event.target.result;
    };
    reader.readAsDataURL(file);

    const formData = new FormData();
    formData.append('avatar', file);

    fetch('/auth/user/upload_avatar/', {
      method: 'POST',
      credentials: 'include',
      body: formData
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        if (data.profile_image_url) {
          profileImage.src = data.profile_image_url;
        }
        console.log("Avatar mis à jour avec succès.");
      } else {
        alert("Erreur lors de la mise à jour de l'avatar : " + data.error);
      }
    })
    .catch(error => {
      console.error("Erreur réseau :", error);
      alert("Erreur lors de l'envoi de l'image.");
    });
  });

  // ------------------------------
  // Fonctionnalité Formulaire Email
  // ------------------------------
  const emailToggle = document.getElementById('email-toggle');
  const emailFormContainer = document.getElementById('email-form-container');
  const emailChevron = document.getElementById('email-chevron');
  const emailForm = document.getElementById('email-form');
  const newEmailInput = document.getElementById('new-email');
  const confirmEmailInput = document.getElementById('confirm-email');

  // Basculement du formulaire au clic sur l'item email
  emailToggle.addEventListener('click', (e) => {
    e.stopPropagation(); // Empêche la propagation pour ne pas déclencher le document click
    emailFormContainer.classList.toggle('open');
    emailChevron.classList.toggle('rotate');
    emailToggle.classList.toggle('open'); // Ajouté pour retirer l'arrondi en bas du toggle
  });

  // Fermeture du formulaire si clic en dehors
  document.addEventListener('click', (e) => {
    if (!emailFormContainer.contains(e.target) && !emailToggle.contains(e.target)) {
      emailFormContainer.classList.remove('open');
      emailChevron.classList.remove('rotate');
      emailToggle.classList.remove('open'); // On retire la classe open du toggle
    }
  });

  // Validation des emails en temps réel
  function validateEmail(email) {
    // Expression régulière basique pour valider un email
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  }

  newEmailInput.addEventListener('input', () => {
    const emailVal = newEmailInput.value.trim();
    if (!validateEmail(emailVal)) {
      newEmailInput.classList.add('is-invalid');
    } else {
      newEmailInput.classList.remove('is-invalid');
    }
  });

  confirmEmailInput.addEventListener('input', () => {
    const emailVal = newEmailInput.value.trim();
    const confirmVal = confirmEmailInput.value.trim();
    if (emailVal !== confirmVal) {
      confirmEmailInput.classList.add('is-invalid');
    } else {
      confirmEmailInput.classList.remove('is-invalid');
    }
  });

  // Gestion de la soumission du formulaire de mise à jour d'email
  emailForm.addEventListener('submit', (e) => {
    e.preventDefault();

    const currentEmail = document.getElementById('old-email').value.trim();
    const newEmail = document.getElementById('new-email').value.trim();
    const confirmEmail = document.getElementById('confirm-email').value.trim();
    const password = document.getElementById('email-password').value.trim();

    let isValid = true;

    // Vérification du nouvel email
    if (!validateEmail(newEmail)) {
      newEmailInput.classList.add('is-invalid');
      isValid = false;
    } else {
      newEmailInput.classList.remove('is-invalid');
    }

    // Vérification de la confirmation
    if (newEmail !== confirmEmail || confirmEmail === '') {
      confirmEmailInput.classList.add('is-invalid');
      isValid = false;
    } else {
      confirmEmailInput.classList.remove('is-invalid');
    }

    // Vérification du mot de passe
    const passwordInput = document.getElementById('email-password');
    if (password === '') {
      passwordInput.classList.add('is-invalid');
      isValid = false;
    } else {
      passwordInput.classList.remove('is-invalid');
    }

    if (!isValid) return;

    // Désactiver le bouton et afficher le spinner
    const submitButton = emailForm.querySelector('button[type="submit"]');
    submitButton.disabled = true;
    const spinner = submitButton.querySelector('.spinner-border');
    spinner.classList.remove('d-none');

    // Préparation du payload
    const payload = {
      current_email: currentEmail,
      new_email: newEmail,
      password: password
    };

    fetch('/auth/user/update_email/', {
      method: 'POST',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json',
        // Ajout du token CSRF si vous utilisez la protection CSRF
        'X-CSRFToken': getCookie('csrftoken')
      },
      body: JSON.stringify(payload)
    })
    .then(response => response.json())
    .then(data => {
      spinner.classList.add('d-none');
      submitButton.disabled = false;
      if (data.success) {
        alert("Email modifié avec succès !");
        // Mise à jour éventuelle de l'UI (par exemple, mise à jour de l'email affiché)
        emailForm.reset();
        emailFormContainer.classList.remove('open');
        emailChevron.classList.remove('rotate');
        emailToggle.classList.remove('open');
      } else {
        alert("Erreur : " + data.error);
      }
    })
    .catch(error => {
      console.error("Erreur lors de la requête :", error);
      spinner.classList.add('d-none');
      submitButton.disabled = false;
      alert("Une erreur est survenue lors de la mise à jour de l'email.");
    });
  });

  // =========================================================
  // 3. Fonctionnalité Formulaire Changer le mot de passe
  // =========================================================
  const passwordToggle = document.getElementById('password-toggle');            // <div id="password-toggle">
  const passwordFormContainer = document.getElementById('password-form-container');  // <div id="password-form-container">
  const passwordChevron = document.getElementById('password-chevron');          // <i id="password-chevron">
  const passwordForm = document.getElementById('password-form');                // <form id="password-form">
  const oldPasswordInput = document.getElementById('old-password');             // <input id="old-password">
  const newPasswordInput = document.getElementById('new-password');             // <input id="new-password">
  const confirmPasswordInput = document.getElementById('confirm-password');     // <input id="confirm-password">

  // -- Ouverture/fermeture au clic sur "Changer le mot de passe"
  passwordToggle.addEventListener('click', (e) => {
    e.stopPropagation();
    passwordFormContainer.classList.toggle('open');
    passwordChevron.classList.toggle('rotate');
    passwordToggle.classList.toggle('open'); // AJOUTÉ : pour enlever l'arrondi en bas
  });

  // -- Fermeture si clic en dehors
  document.addEventListener('click', (e) => {
    if (!passwordFormContainer.contains(e.target) && !passwordToggle.contains(e.target)) {
      passwordFormContainer.classList.remove('open');
      passwordChevron.classList.remove('rotate');
      passwordToggle.classList.remove('open'); // Ajouté pour rétablir l'espacement
    }
  });

  // -- Validation basique du mot de passe
  function validatePassword(pwd) {
    // Exemple : au moins 6 caractères
    return pwd.length >= 6;
  }

  newPasswordInput.addEventListener('input', () => {
    const val = newPasswordInput.value.trim();
    if (!validatePassword(val)) {
      newPasswordInput.classList.add('is-invalid');
    } else {
      newPasswordInput.classList.remove('is-invalid');
    }
  });

  confirmPasswordInput.addEventListener('input', () => {
    const newVal = newPasswordInput.value.trim();
    const confirmVal = confirmPasswordInput.value.trim();
    if (newVal !== confirmVal) {
      confirmPasswordInput.classList.add('is-invalid');
    } else {
      confirmPasswordInput.classList.remove('is-invalid');
    }
  });

  // -- Soumission du formulaire "mot de passe" (mise à jour réelle via AJAX)
  passwordForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const currentPassword = oldPasswordInput.value.trim();
    const newPassword = newPasswordInput.value.trim();
    const confirmPassword = confirmPasswordInput.value.trim();

    // Vérifier que tous les champs sont remplis
    if (!currentPassword || !newPassword || !confirmPassword) {
      alert("Veuillez remplir tous les champs.");
      return;
    }
    // Vérifier la correspondance des nouveaux mots de passe
    if (newPassword !== confirmPassword) {
      alert("Les nouveaux mots de passe ne correspondent pas.");
      return;
    }
    // Vérifier les critères de sécurité : minimum 8 caractères, au moins une majuscule, un chiffre et un caractère spécial
    const passwordRegex = /^(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9]).{8,}$/;
    if (!passwordRegex.test(newPassword)) {
      alert("Le nouveau mot de passe doit contenir au moins 8 caractères, une majuscule, un chiffre et un caractère spécial.");
      return;
    }
    // Vérifier que le nouveau mot de passe est différent de l'ancien
    if (currentPassword === newPassword) {
      alert("Votre nouveau mot de passe doit être différent de l'ancien.");
      return;
    }

    // Désactivation du bouton et affichage du spinner
    const submitButton = passwordForm.querySelector('button[type="submit"]');
    submitButton.disabled = true;
    const spinner = submitButton.querySelector('.spinner-border');
    if (spinner) spinner.classList.remove('d-none');

    // Préparation du payload
    const payload = {
      current_password: currentPassword,
      new_password: newPassword,
      confirm_password: confirmPassword
    };

    // Envoi de la requête AJAX vers le backend pour mettre à jour le mot de passe
    fetch('/auth/user/update_password/', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRFToken': getCookie('csrftoken')
      },
      credentials: 'include',
      body: JSON.stringify(payload)
    })
    .then(response => response.json())
    .then(data => {
      if (spinner) spinner.classList.add('d-none');
      submitButton.disabled = false;
      if (data.success) {
        alert("Mot de passe modifié avec succès !");
        // Réinitialisation du formulaire et fermeture du conteneur
        oldPasswordInput.value = '';
        newPasswordInput.value = '';
        confirmPasswordInput.value = '';
        passwordFormContainer.classList.remove('open');
        passwordChevron.classList.remove('rotate');
      } else {
        alert("Erreur : " + data.error);
      }
    })
    .catch(error => {
      console.error("Erreur :", error);
      if (spinner) spinner.classList.add('d-none');
      submitButton.disabled = false;
      alert("Une erreur est survenue lors de la mise à jour du mot de passe.");
    });
  });

  // =====================================================
  // 2. Gestion du Toggle 2FA avec les icônes Bootstrap
  // =====================================================
  // Récupération du bouton toggle et de l'icône
  const twofaBtn = document.getElementById('twofa-btn');
  const twofaIcon = document.getElementById('twofa-icon');
  // (Optionnel) conteneur du formulaire OTP
  const twofaFormContainer = document.getElementById('2faFormContainer');
  
  // Récupération de l'état sauvegardé dans le localStorage (par défaut désactivé)
  let twofaEnabled = localStorage.getItem('twofa_enabled') === 'true';
  
  // Fonction qui met à jour l'interface en fonction de l'état
  function updateTwofaUI() {
    if (twofaEnabled) {
      // Si 2FA est activée : on affiche l'icône toggle-on en vert
      twofaIcon.classList.remove('bi-toggle-off', 'text-danger');
      twofaIcon.classList.add('bi-toggle-on', 'text-success');
      twofaBtn.setAttribute('aria-label', 'Désactiver 2FA');
      // (Optionnel) Afficher le formulaire OTP
      if(twofaFormContainer) {
        twofaFormContainer.style.display = 'block';
      }
    } else {
      // Si 2FA est désactivée : on affiche l'icône toggle-off en rouge
      twofaIcon.classList.remove('bi-toggle-on', 'text-success');
      twofaIcon.classList.add('bi-toggle-off', 'text-danger');
      twofaBtn.setAttribute('aria-label', 'Activer 2FA');
      // (Optionnel) Masquer le formulaire OTP
      if(twofaFormContainer) {
        twofaFormContainer.style.display = 'none';
      }
    }
  }
  
  // Mettre à jour l'interface dès le chargement de la page
  updateTwofaUI();
  
  // Gestion du clic sur le bouton toggle
  twofaBtn.addEventListener('click', function() {
    twofaEnabled = !twofaEnabled;
    localStorage.setItem('twofa_enabled', twofaEnabled);
    updateTwofaUI();
  });  

  // Fonction utilitaire pour récupérer le cookie CSRF (si nécessaire)
  function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
      const cookies = document.cookie.split(';');
      for (let i = 0; i < cookies.length; i++) {
        const cookie = cookies[i].trim();
        // Vérifie si ce cookie correspond au nom recherché
        if (cookie.substring(0, name.length + 1) === (name + '=')) {
          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
          break;
        }
      }
    }
    return cookieValue;
  }

  // Validation basique d'email (si besoin ailleurs)
  function validateEmail(email) {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  }
});
# Utiliser une image Python légère
FROM python:3.10-alpine

# Créer un répertoire de travail
WORKDIR /app

# Installer les dépendances système nécessaires
RUN apk update && apk add --no-cache \
    postgresql-client \              
    postgresql-dev \                 
    gcc \                            
    musl-dev \                       
    libffi-dev \                     
    openssl-dev \                    
    zlib-dev \                       
    jpeg-dev \                       
    freetype-dev \                   
    lcms2-dev \                      
    tiff-dev \                       
    py3-pip \                        
    python3-dev \                    
    build-base \                     
    curl \                           
    bash                            


# Copier les fichiers de configuration
COPY requirements.txt .

# Installer les dépendances Python
RUN pip install --no-cache-dir -r requirements.txt

# Nettoyer le cache pour réduire la taille de l'image
RUN apk del gcc musl-dev libffi-dev openssl-dev && rm -rf /var/cache/apk/*

# Copier le code source du backend
COPY . /app

# Exposer le port 8000
EXPOSE 8000

# Lancer le serveur Django
CMD ["sh", "-c", "while ! nc -z db 5432; do sleep 1; done; python manage.py migrate && python manage.py runserver 0.0.0.0:8000"]
#!/usr/bin/env python
import os
import sys

def main():
    """Point d'entrée principal pour les commandes Django."""
    # Définit les paramètres du projet Django
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'conecte_me_backend.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Impossible d'importer Django. Assurez-vous qu'il est installé "
            "et que le virtualenv est activé. Consultez les dépendances "
            "dans requirements.txt."
        ) from exc
    execute_from_command_line(sys.argv)

if __name__ == '__main__':
    main()
Django==4.2
djangorestframework==3.14.0
psycopg2-binary==2.9.6
PyJWT==2.8.0
requests==2.31.0
python-decouple==3.8  # Ajouté pour une meilleure gestion des variables d'environnement
django-oauth-toolkit==2.0.0

qrcode>=7.3.1
pyotp>=2.8.0
Pillow>=9.0.0



# backend/conecte_me_backend/settings.py
import os
from pathlib import Path
import logging


# Définition du répertoire de base du projet
BASE_DIR = Path(__file__).resolve().parent.parent

# Clé secrète (à garder secrète en production)
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'unsafe-secret-key')

# Mode débogage
DEBUG = os.environ.get('DEBUG', '1') == '1'

# Configuration des hôtes autorisés
ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Applications installées
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Applications tierces
    'rest_framework',
    'oauth2_provider',

    # Applications personnalisées
    'oauth_app',
]

# Middleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Configuration des URL
ROOT_URLCONF = 'conecte_me_backend.urls'

# Configuration des templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
            BASE_DIR / 'oauth_app' / 'templates',  # Ajout du dossier des templates de 2FA
        ],

        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Configuration WSGI
WSGI_APPLICATION = 'conecte_me_backend.wsgi.application'

# Configuration de la base de données
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', 'conecteme_db'),
        'USER': os.environ.get('POSTGRES_USER', 'conecteme_user'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'conecteme_password'),
        'HOST': os.environ.get('POSTGRES_HOST', 'db'),
        'PORT': os.environ.get('POSTGRES_PORT', '5432'),
    }
}

# Configuration des mots de passe
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Paramètres de localisation
LANGUAGE_CODE = 'fr-fr'
TIME_ZONE = 'Europe/Paris'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Configuration des fichiers statiques
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Configuration des fichiers médias
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Configuration des backends d'authentification
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'oauth2_provider.backends.OAuth2Backend',
)

# Configuration des paramètres OAuth2
OAUTH2_PROVIDER = {
    'ACCESS_TOKEN_EXPIRE_SECONDS': 3600,
    'AUTHORIZATION_CODE_EXPIRE_SECONDS': 600,
    'OAUTH2_BACKEND_CLASS': 'oauth2_provider.oauth2_backends.OAuthLibCore',
    'OAUTH2_VALIDATOR_CLASS': 'oauth2_provider.oauth2_validators.OAuth2Validator',
    'SCOPES': {'public': 'Accès public'},
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    ),
}

# Configuration des informations client OAuth2
OAUTH42_WEBSITE = 'https://localhost:8443'
OAUTH42_CLIENT_ID = 'u-s4t2ud-212adcc9d7bcdde9f1b4072ac7e13a17ce8c3493475514c9c139b3f993a243a6'
OAUTH42_CLIENT_SECRET = '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'
OAUTH42_REDIRECT_URI = 'https://localhost:8443/auth/42/callback'
OAUTH42_AUTH_URL = 'https://api.intra.42.fr/oauth/authorize'
OAUTH42_TOKEN_URL = 'https://api.intra.42.fr/oauth/token'
OAUTH42_USER_URL = 'https://api.intra.42.fr/v2/me'

# Configuration des e-mails
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'webmaster@localhost'

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
logger.debug(f"Connecting to DB: {DATABASES['default']}")

# Définition du répertoire où seront stockés les fichiers de logs.
# Ici, nous créons un dossier "logs" à la racine du projet.
LOG_DIR = BASE_DIR / 'logs'
if not LOG_DIR.exists():
    # Crée le dossier "logs" s'il n'existe pas, en incluant tous les dossiers parents nécessaires.
    LOG_DIR.mkdir(parents=True, exist_ok=True)

# Configuration de la journalisation (logging) de Django.
# Cette configuration est définie sous forme de dictionnaire et suit le schéma de configuration du module logging de Python.
LOGGING = {
    # Version du schéma de configuration du logging.
    'version': 1,
    # Ne pas désactiver les loggers existants (utile pour conserver la configuration par défaut de Django).
    'disable_existing_loggers': False,

    # Définition des formatters, qui déterminent le format des messages de log.
    'formatters': {
        # Formatter "verbose" : fournit des informations détaillées telles que le niveau, l'heure, le module, l'ID du processus, l'ID du thread et le message.
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',  # Utilisation du style "{" pour le formatage
        },
        # Formatter "simple" : affiche seulement le niveau de log et le message.
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },

    # Définition des handlers, qui déterminent où les messages de log seront envoyés.
    'handlers': {
        # Handler "file" : enregistre les logs dans un fichier.
        'file': {
            'level': 'INFO',  # Seuls les messages d'INFO et plus sont enregistrés dans le fichier.
            'class': 'logging.FileHandler',  # Utilise le FileHandler pour écrire dans un fichier.
            'filename': str(LOG_DIR / 'django.log'),  # Chemin complet vers le fichier de log.
            'formatter': 'verbose',  # Utilise le formatter "verbose" défini ci-dessus.
        },
        # Handler "console" : affiche les logs dans la console (stdout).
        'console': {
            'level': 'DEBUG',  # Affiche tous les messages de DEBUG et plus dans la console.
            'class': 'logging.StreamHandler',  # Utilise StreamHandler pour écrire dans la console.
            'formatter': 'simple',  # Utilise le formatter "simple".
        },
    },

    # Configuration des loggers pour différentes parties de l'application.
    'loggers': {
        # Logger pour Django (les messages émis par Django lui-même).
        'django': {
            'handlers': ['file', 'console'],  # Envoie les logs à la fois dans le fichier et à la console.
            'level': 'INFO',  # Niveau minimum pour enregistrer les messages.
            'propagate': True,  # Les messages sont également propagés au logger racine.
        },
        # Logger racine (pour capturer les messages non spécifiquement attribués à un autre logger).
        '': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
        },
    },
}

# Par exemple, vous pouvez tester cette configuration en ajoutant un message de log au démarrage :
import logging
logger = logging.getLogger(__name__)
logger.info("La configuration du logging est activée et les logs seront enregistrés dans 'logs/django.log'.")
from django.contrib import admin
from django.urls import path, include
from oauth_app import views  # Remplacez par le nom correct de l'application contenant la vue
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('auth/', include('oauth_app.urls')),  # Toutes les routes d’authentification et 2FA
    path('auth/42/', include('oauth_app.urls')),  # Routes d’auth OAuth 42
    path('auth/signup/', views.signup_view, name='signup'),  # Ajoutez cette ligne
    
    # AJOUTER la ligne ci-dessous (ou le merge dans votre existant):
    path('auth/login/', views.login_view, name='login'),     # /auth/login/
]

# Ajout de la configuration pour servir les fichiers médias en développement
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'conecte_me_backend.settings')

application = get_wsgi_application()
from django.db import models
from django.contrib.auth.hashers import make_password

class User42(models.Model):
    user_id = models.IntegerField(unique=True)
    username = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)
    first_name = models.CharField(max_length=50, null=False, default="Unknown")
    email_address = models.EmailField(unique=True, null=False, default="placeholder@example.com")
    password = models.CharField(max_length=128, null=False, default="to_be_hashed")

    # Champs pour l'authentification 2FA
    totp_secret = models.CharField(max_length=32, blank=True, null=True)
    is_2fa_enabled = models.BooleanField(default=False)

    # Nouveau champ pour l'image de profil
    profile_image = models.ImageField(
        upload_to='profile_pictures/',
        default='profile_pictures/default_avatar.png'
    )

    def __str__(self):
        return f"{self.username} ({self.email_address})"

    def set_password(self, raw_password: str):
        self.password = make_password(raw_password)
# backend/oauth_app/urls.py
from django.urls import path
from .views import (
    redirect_to_42,
    callback_42,
    signup_view,
    login_view,
    user_info,  # <--- Import de la nouvelle vue
    upload_avatar_view,
    set_42_password_view,
    update_email_view,  # Import de la nouvelle vue
    update_password_view,

)
from . import twofa_views

urlpatterns = [
    path('signup/', signup_view, name='signup'),
    path('login/', login_view, name='login'),
    path('login-42/', redirect_to_42, name='redirect_to_42'),
    path('callback', callback_42, name='callback_42'),
    path('42/password/', set_42_password_view, name='set_42_password'),  # <== Ajouté ici

    path('2fa/setup/', twofa_views.two_factor_setup, name='two_factor_setup'),
    path('2fa/validate/', twofa_views.two_factor_validate, name='two_factor_validate'),
    # Nouvelle route pour récupérer le username
    path('user/', user_info, name='user_info'),

    path('user/upload_avatar/', upload_avatar_view, name='upload_avatar'),
    path('user/update_email/', update_email_view, name='update_email'),
    path("user/update_password/", update_password_view, name="update_password"),


]
import os
import jwt
import datetime

def generate_jwt(user_id, username):
    secret_key = os.environ.get('SECRET_KEY', 'unsafe-default-key')
    expiration = datetime.datetime.utcnow() + datetime.timedelta(hours=1)
    payload = {
        'user_id': user_id,
        'username': username,
        'exp': expiration,
        'iss': 'ConecteMe'
    }
    token = jwt.encode(payload, secret_key, algorithm='HS256')
    return token
import os
import requests
import jwt
import datetime
import requests
import json
import re


from django.shortcuts import redirect, render
from django.http import JsonResponse, HttpResponseRedirect
from django.urls import reverse
from django.utils.crypto import get_random_string
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth.hashers import check_password, make_password
from django.db import IntegrityError, transaction

from django.middleware.csrf import get_token
from django.contrib import messages

from .models import User42
from .utils import generate_jwt

# Ajout de la gestion des logs
import logging
logger = logging.getLogger(__name__)

# Récupération des variables d'env
CLIENT_ID = os.environ.get('OAUTH42_CLIENT_ID')
CLIENT_SECRET = os.environ.get('OAUTH42_CLIENT_SECRET')
REDIRECT_URI = os.environ.get('OAUTH42_REDIRECT_URI')
TOKEN_URL = "https://api.intra.42.fr/oauth/token"
AUTHORIZE_URL = "https://api.intra.42.fr/oauth/authorize"

def redirect_to_42(request):
    """
    Redirige vers la page d'authentification 42 en utilisant
    Authorization Code Grant. On génère un state random pour la protection CSRF.
    """
    state = get_random_string(32)
    request.session['oauth_state'] = state

    params = {
        'client_id': CLIENT_ID,
        'redirect_uri': REDIRECT_URI,
        'response_type': 'code',
        'scope': 'public',
        'state': state,
    }
    # Construction de l'URL d'authentification
    query_string = "&".join([f"{k}={v}" for k, v in params.items()])
    auth_url = f"{AUTHORIZE_URL}?{query_string}"
    return redirect(auth_url)


def callback_42(request):
    """
    Gère le callback après authentification 42.
    Échange le code reçu contre un token, récupère les infos utilisateur et,
    si un mot de passe temporaire a été défini via signin42, l'utilise pour mettre à jour le compte.
    """
    # Vérification du state
    state_session = request.session.get('oauth_state')
    state_request = request.GET.get('state')
    if not state_session or state_session != state_request:
        return JsonResponse({"error": "Invalid state"}, status=400)

    code = request.GET.get('code')
    if not code:
        return JsonResponse({"error": "No code provided"}, status=400)

    # Échange du code contre un access token
    data = {
        'grant_type': 'authorization_code',
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'code': code,
        'redirect_uri': REDIRECT_URI,
    }
    try:
        response = requests.post(TOKEN_URL, data=data)
        token_data = response.json()
        access_token = token_data.get('access_token')
        if not access_token:
            return JsonResponse({"error": "Failed to retrieve access token"}, status=400)
    except Exception as e:
        return JsonResponse({"error": str(e)}, status=400)

    # Récupération des infos utilisateur depuis l'API 42
    user_info_url = "https://api.intra.42.fr/v2/me"
    headers = {
        'Authorization': f"Bearer {access_token}"
    }
    user_resp = requests.get(user_info_url, headers=headers)
    if user_resp.status_code != 200:
        return JsonResponse({"error": "Failed to retrieve user info"}, status=400)

    user_data = user_resp.json()
    user_id_42 = user_data['id']
    user_name_42 = user_data['login']

    # Récupération de l'email et du prénom depuis l'API 42
    email_from_api = user_data.get('email')
    first_name_from_api = user_data.get('first_name')

    # Si l'API ne fournit pas ces informations, on utilise des valeurs par défaut.
    email_value = email_from_api if email_from_api else 'placeholder@example.com'
    first_name_value = first_name_from_api if first_name_from_api else 'Unknown'

    try:
        with transaction.atomic():
            # Récupération éventuelle d'un mot de passe temporaire défini via signin42
            temp_password = request.session.get('temp_hashed_password')

            # Recherche de l'utilisateur par email (champ unique dans notre cas)
            user = User42.objects.filter(email_address=email_value).first()
            if user:
                # L'utilisateur existe déjà : on met à jour ses infos si nécessaire
                if (email_from_api and email_from_api != user.email_address) or \
                   (first_name_from_api and first_name_from_api != user.first_name):
                    user.email_address = email_from_api or user.email_address
                    user.first_name = first_name_from_api or user.first_name
                # Si un mot de passe temporaire est présent, on l'utilise pour mettre à jour le mot de passe
                if temp_password:
                    user.password = temp_password
                    del request.session['temp_hashed_password']
                user.save()
            else:
                # L'utilisateur n'existe pas encore : on lui attribue un user_id unique
                existing_ids = list(User42.objects.values_list('user_id', flat=True))
                sorted_ids = sorted(existing_ids)
                new_user_id = 0
                for uid in sorted_ids:
                    if uid == new_user_id:
                        new_user_id += 1
                    else:
                        break

                user = User42(
                    user_id=new_user_id,
                    username=user_name_42,
                    email_address=email_value,
                    first_name=first_name_value,
                )
                # Si un mot de passe temporaire a été défini, on l'utilise dès la création
                if temp_password:
                    user.password = temp_password
                    del request.session['temp_hashed_password']
                user.save()
    except IntegrityError:
        return JsonResponse({"error": "Erreur lors de l'inscription de l'utilisateur"}, status=400)

    # Mise à jour de la session
    request.session['user_id'] = user.pk
    request.session['email'] = user.email_address

    # Génération d'un JWT pour la session
    jwt_token = generate_jwt(user_id=user_id_42, username=user_name_42)

    # Redirection côté frontend vers l'interface de jeu, en transmettant le token
    response = HttpResponseRedirect(f"https://localhost:8443/game_interface.html?jwt={jwt_token}")
    return response

# --- Vue d'inscription modifiée pour gérer l'upload de l'image de profil ---
@csrf_exempt
def signup_view(request):
    if request.method == 'POST':
        # Récupération des données du formulaire
        first_name   = request.POST.get('firstname')
        email        = request.POST.get('email')
        raw_password = request.POST.get('password')
        pseudo       = request.POST.get('pseudo', '')

        # Vérification que tous les champs requis sont présents
        if not all([first_name, email, raw_password]):
            return JsonResponse(
                {"success": False, "error": "Tous les champs requis ne sont pas remplis."},
                status=400
            )

        # Gestion de l'image de profil
        profile_image = request.FILES.get('avatar')
        if profile_image:
            # Limiter la taille du fichier à 2MB
            if profile_image.size > 2 * 1024 * 1024:
                return JsonResponse(
                    {"success": False, "error": "La taille de l'image ne doit pas dépasser 2MB."},
                    status=400
                )
            # Vérifier le type MIME (seuls JPEG et PNG sont acceptés)
            if profile_image.content_type not in ['image/jpeg', 'image/png']:
                return JsonResponse(
                    {"success": False, "error": "Format d'image non supporté. Seul JPEG et PNG sont autorisés."},
                    status=400
                )

        try:
            with transaction.atomic():
                # Récupérer tous les user_id existants
                existing_ids = list(User42.objects.values_list('user_id', flat=True))
                # Trier les IDs pour faciliter la recherche de la plus petite valeur manquante
                sorted_ids = sorted(existing_ids)

                # Déterminer le plus petit user_id disponible
                new_user_id = 0
                for uid in sorted_ids:
                    if uid == new_user_id:
                        new_user_id += 1
                    else:
                        # Dès qu'on trouve un gap, on arrête : new_user_id est disponible
                        break

                # Création de l'utilisateur avec le user_id trouvé
                user = User42(
                    user_id=new_user_id,
                    username=pseudo or email.split('@')[0],
                    first_name=first_name,
                    email_address=email,
                )
                user.password = make_password(raw_password)
                if profile_image:
                    user.profile_image = profile_image
                user.save()

        except IntegrityError:
            # Gestion propre des erreurs transactionnelles pour éviter les conflits d'unicité
            return JsonResponse(
                {"success": False, "error": "Cette adresse e-mail est déjà utilisée."},
                status=400
            )

        return JsonResponse(
            {"success": True, "detail": "Inscription réussie."},
            status=201
        )

    return JsonResponse(
        {"success": False, "error": "Méthode non autorisée."},
        status=405
    )

@csrf_exempt
def login_view(request):
    """
    Vue permettant à l'utilisateur de se connecter avec email + password.
    Retourne un JSON indiquant le succès ou l'échec,
    ainsi qu'une éventuelle URL de redirection.
    """
    if request.method == 'POST':
        email = request.POST.get('email')
        password = request.POST.get('password')

        if not email or not password:
            return JsonResponse({
                "success": False,
                "error": "Champs 'email' et 'password' requis."
            }, status=400)

        # On tente de récupérer l'utilisateur via l’email
        user = User42.objects.filter(email_address=email).first()
        if not user:
            return JsonResponse({
                "success": False,
                "error": "Email ou mot de passe incorrect."
            }, status=401)

        # Vérification du mot de passe
    if check_password(password, user.password):
        # Authentification réussie : stocker l'ID dans la session
        request.session['user_id'] = user.pk
        request.session['email'] = user.email_address
        
        # Vérifier si la 2FA n'est pas activée
        if not user.is_2fa_enabled:
            return JsonResponse({
                "success": True,
                "redirect": "/auth/2fa/setup/"
            }, status=200)
        else:
            return JsonResponse({
                "success": True,
                "redirect": "/game_interface.html"
            }, status=200)

    # Méthode non autorisée
    return JsonResponse({
        "success": False,
        "error": "Méthode non autorisée."
    }, status=405)

# -------------------------------
# Nouvelle vue pour récupérer le username
# -------------------------------
def user_info(request):
    logger.debug("Appel de user_info, session: %s", dict(request.session))
    user_id = request.session.get('user_id')
    if not user_id:
        logger.error("Aucun user_id dans la session !")
        return JsonResponse({'error': 'User not authenticated'}, status=401)
    try:
        user = User42.objects.get(pk=user_id)
        logger.debug("Utilisateur trouvé : %s", user.username)
        return JsonResponse({'username': user.username, 'profile_image': user.profile_image.url})
    except User42.DoesNotExist:
        logger.error("Utilisateur non trouvé pour user_id=%s", user_id)
        return JsonResponse({'error': 'User not found'}, status=404)
    
@csrf_exempt
def upload_avatar_view(request):
    if request.method == 'POST':
        # Vérification de l'authentification via la session
        user_id = request.session.get('user_id')
        if not user_id:
            return JsonResponse({"success": False, "error": "Utilisateur non authentifié."}, status=401)
        try:
            user = User42.objects.get(pk=user_id)
        except User42.DoesNotExist:
            return JsonResponse({"success": False, "error": "Utilisateur non trouvé."}, status=404)

        # Récupération du fichier envoyé
        avatar_file = request.FILES.get('avatar')
        if not avatar_file:
            return JsonResponse({"success": False, "error": "Aucun fichier envoyé."}, status=400)

        # Vérification de la taille (max 2MB)
        if avatar_file.size > 2 * 1024 * 1024:
            return JsonResponse({"success": False, "error": "La taille de l'image ne doit pas dépasser 2MB."}, status=400)
        # Vérification du format (JPEG/PNG)
        if avatar_file.content_type not in ['image/jpeg', 'image/png']:
            return JsonResponse({"success": False, "error": "Format d'image non supporté."}, status=400)

        # Sauvegarde du nouvel avatar dans le modèle (le champ profile_image gère le chemin d'upload)
        user.profile_image = avatar_file
        user.save()

        # Retour de l'URL de la nouvelle image pour mise à jour immédiate côté client
        return JsonResponse({"success": True, "profile_image_url": user.profile_image.url}, status=200)
    else:
        return JsonResponse({"success": False, "error": "Méthode non autorisée."}, status=405)
    
@csrf_exempt
def set_42_password_view(request):
    """
    Réception du mot de passe saisi par l’utilisateur lors de sa première connexion via 42.
    Le mot de passe est validé, haché et stocké temporairement dans la session.
    """
    if request.method == 'POST':
        password = request.POST.get('password')
        confirm = request.POST.get('confirmPassword')

        if not password or not confirm or password != confirm:
            return JsonResponse({"success": False, "error": "Les mots de passe ne correspondent pas."}, status=400)

        # Vérification côté serveur : minimum 8 caractères, 1 majuscule, 1 chiffre, 1 caractère spécial
        pattern = r'^(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9]).{8,}$'
        if not re.match(pattern, password):
            return JsonResponse({"success": False, "error": "Le mot de passe ne respecte pas les critères de sécurité."}, status=400)

        # Hachage sécurisé du mot de passe
        hashed_password = make_password(password)
        # Stockage temporaire dans la session
        request.session['temp_hashed_password'] = hashed_password

        return JsonResponse({
            "success": True,
            "detail": "Mot de passe défini avec succès. Vous allez être redirigé vers l'authentification 42."
        }, status=200)
    else:
        return JsonResponse({"success": False, "error": "Méthode non autorisée."}, status=405)
    
@csrf_exempt
def update_email_view(request):
    if request.method != 'POST':
        return JsonResponse({"success": False, "error": "Méthode non autorisée."}, status=405)
    
    # Vérifier que l'utilisateur est authentifié via la session
    user_id = request.session.get('user_id')
    if not user_id:
        return JsonResponse({"success": False, "error": "Utilisateur non authentifié."}, status=401)
    
    try:
        user = User42.objects.get(pk=user_id)
    except User42.DoesNotExist:
        return JsonResponse({"success": False, "error": "Utilisateur non trouvé."}, status=404)
    
    # Extraire le JSON envoyé
    try:
        data = json.loads(request.body)
    except Exception:
        return JsonResponse({"success": False, "error": "JSON invalide."}, status=400)
    
    current_email = data.get('current_email', '').strip()
    new_email = data.get('new_email', '').strip()
    password = data.get('password', '')

    # Vérification que l'email actuel correspond à celui enregistré
    if current_email != user.email_address:
        return JsonResponse({"success": False, "error": "L'email actuel ne correspond pas."}, status=400)
    
    # Vérifier le format du nouvel email
    email_regex = r'^[^\s@]+@[^\s@]+\.[^\s@]+$'
    if not re.match(email_regex, new_email):
        return JsonResponse({"success": False, "error": "Le nouvel email n'est pas valide."}, status=400)
    
    # Vérifier que le nouvel email n'est pas déjà utilisé par un autre compte
    if User42.objects.filter(email_address=new_email).exclude(pk=user_id).exists():
        return JsonResponse({"success": False, "error": "Cet email est déjà utilisé par un autre compte."}, status=400)
    
    # Vérifier que le mot de passe est correct
    if not check_password(password, user.password):
        return JsonResponse({"success": False, "error": "Mot de passe incorrect."}, status=400)
    
    # Tout est validé : mise à jour de l'email
    user.email_address = new_email
    user.save()
    
    # Mettre à jour éventuellement la session
    request.session['email'] = new_email
    
    return JsonResponse({"success": True, "detail": "Email mis à jour avec succès."}, status=200)

@csrf_exempt
def update_password_view(request):
    if request.method != "POST":
        return JsonResponse({"success": False, "error": "Méthode non autorisée."}, status=405)
    
    # Vérifier que l'utilisateur est authentifié via la session
    user_id = request.session.get("user_id")
    if not user_id:
        return JsonResponse({"success": False, "error": "Utilisateur non authentifié."}, status=401)
    
    # Extraction des données JSON
    try:
        data = json.loads(request.body)
    except Exception:
        return JsonResponse({"success": False, "error": "JSON invalide."}, status=400)
    
    current_password = data.get("current_password", "").strip()
    new_password = data.get("new_password", "").strip()
    confirm_password = data.get("confirm_password", "").strip()
    
    # Vérification que tous les champs sont présents
    if not current_password or not new_password or not confirm_password:
        return JsonResponse({"success": False, "error": "Tous les champs sont requis."}, status=400)
    
    # Vérification de la correspondance des nouveaux mots de passe
    if new_password != confirm_password:
        return JsonResponse({"success": False, "error": "Les nouveaux mots de passe ne correspondent pas."}, status=400)
    
    # Vérification des critères de sécurité
    password_pattern = r"^(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9]).{8,}$"
    if not re.match(password_pattern, new_password):
        return JsonResponse({"success": False, "error": "Le nouveau mot de passe ne respecte pas les critères de sécurité."}, status=400)
    
    # Récupération de l'utilisateur
    try:
        user = User42.objects.get(pk=user_id)
    except User42.DoesNotExist:
        return JsonResponse({"success": False, "error": "Utilisateur non trouvé."}, status=404)
    
    # Vérification du mot de passe actuel
    if not check_password(current_password, user.password):
        return JsonResponse({"success": False, "error": "Mot de passe actuel incorrect."}, status=400)
    
    # Vérifier que le nouveau mot de passe est différent de l'ancien
    if current_password == new_password:
        return JsonResponse({"success": False, "error": "Votre nouveau mot de passe doit être différent de l'ancien."}, status=400)
    
    # Tout est validé : hachage et mise à jour du mot de passe
    user.password = make_password(new_password)
    user.save()
    
    return JsonResponse({"success": True, "detail": "Mot de passe mis à jour avec succès."}, status=200)