Container conecteme_proxy  Stopping
Container conecteme_proxy  Stopping
Container conecteme_proxy  Stopped
Container conecteme_proxy  Removing
Container conecteme_proxy  Removed
Container conecteme_frontend  Stopping
Container conecteme_frontend  Stopping
Container conecteme_frontend  Stopped
Container conecteme_frontend  Removing
Container conecteme_frontend  Removed
Container conecteme_backend  Stopping
Container conecteme_backend  Stopping
Container conecteme_backend  Stopped
Container conecteme_backend  Removing
Container conecteme_backend  Removed
Container conecteme_db  Stopping
Container conecteme_db  Stopping
Container conecteme_db  Stopped
Container conecteme_db  Removing
Container conecteme_db  Removed
Volume conecte_me_postgres_data  Removing
Volume conecte_me_media_data  Removing
Network conecte_me_conecteme_network  Removing
Volume conecte_me_postgres_data  Removed
Volume conecte_me_media_data  Removed
Network conecte_me_conecteme_network  Removed
.
├── backend
│   ├── conecte_me_backend
│   │   ├── __init__.py
│   │   ├── __pycache__
│   │   │   ├── __init__.cpython-310.pyc
│   │   │   ├── settings.cpython-310.pyc
│   │   │   └── urls.cpython-310.pyc
│   │   ├── settings.py
│   │   ├── urls.py
│   │   └── wsgi.py
│   ├── Dockerfile
│   ├── manage.py
│   ├── media
│   │   └── profile_pictures
│   │       └── default_avatar.png
│   ├── oauth_app
│   │   ├── __init__.py
│   │   ├── migrations
│   │   │   ├── 0001_initial.py
│   │   │   ├── 0002_user42_email_address_user42_first_name_and_more.py
│   │   │   ├── 0003_user42_is_2fa_enabled_user42_totp_secret.py
│   │   │   ├── 0004_alter_user42_totp_secret.py
│   │   │   ├── 0005_user42_profile_image.py
│   │   │   ├── __init__.py
│   │   │   └── __pycache__
│   │   │       ├── 0001_initial.cpython-310.pyc
│   │   │       ├── 0002_user42_email_address_user42_first_name_and_more.cpython-310.pyc
│   │   │       ├── 0003_user42_is_2fa_enabled_user42_totp_secret.cpython-310.pyc
│   │   │       ├── 0004_alter_user42_totp_secret.cpython-310.pyc
│   │   │       ├── 0005_user42_profile_image.cpython-310.pyc
│   │   │       └── __init__.cpython-310.pyc
│   │   ├── models.py
│   │   ├── output.log
│   │   ├── __pycache__
│   │   │   ├── __init__.cpython-310.pyc
│   │   │   ├── models.cpython-310.pyc
│   │   │   ├── tests.cpython-310.pyc
│   │   │   ├── twofa_views.cpython-310.pyc
│   │   │   ├── urls.cpython-310.pyc
│   │   │   ├── utils.cpython-310.pyc
│   │   │   └── views.cpython-310.pyc
│   │   ├── templates
│   │   │   └── 2fa_setup.html
│   │   ├── tests.py
│   │   ├── twofa_views.py
│   │   ├── urls.py
│   │   ├── utils.py
│   │   └── views.py
│   └── requirements.txt
├── certs
│   ├── localhost.crt
│   └── localhost.key
├── docker-compose.yml
├── frontend
│   ├── confirmation.html
│   ├── Dockerfile
│   ├── game_interface.html
│   ├── game_setup.html
│   ├── index.html
│   ├── login.html
│   ├── privacy.html
│   ├── signin42.html
│   ├── signup.html
│   ├── static
│   │   ├── css
│   │   │   ├── login.css
│   │   │   ├── main.css
│   │   │   └── signup.css
│   │   ├── img
│   │   │   ├── 42_logo.png
│   │   │   ├── Game_anime.png
│   │   │   ├── PONG_Accueil.png
│   │   │   ├── PONG_seul.png
│   │   │   ├── return_arrow.png
│   │   │   ├── Symbole_return.png
│   │   │   └── User_title.png
│   │   └── js
│   │       ├── 2fa.js
│   │       ├── login.js
│   │       ├── main.js
│   │       ├── signin42.js
│   │       ├── signup.js
│   │       └── user.js
│   ├── stats_page.html
│   ├── team.html
│   ├── terms.html
│   └── user.html
├── nginx.conf
├── output.log
└── README.md

16 directories, 74 files
# Django
SECRET_KEY=change_me_in_production
DEBUG=1

# PostgreSQL
POSTGRES_DB=conecteme_db
POSTGRES_USER=conecteme_user
POSTGRES_PASSWORD=conecteme_password
POSTGRES_HOST=db
POSTGRES_PORT=5432

# OAuth 42
OAUTH42_WEBSITE=https://localhost:8443
OAUTH42_CLIENT_ID=u-s4t2ud-212adcc9d7bcdde9f1b4072ac7e13a17ce8c3493475514c9c139b3f993a243a6
OAUTH42_CLIENT_SECRET=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
OAUTH42_REDIRECT_URI=https://localhost:8443/auth/42/callback
OAUTH42_AUTH_URL=https://api.intra.42.fr/oauth/authorize
OAUTH42_TOKEN_URL=https://api.intra.42.fr/oauth/token
OAUTH42_USER_URL=https://api.intra.42.fr/v2/me


version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: conecteme_db
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - conecteme_network

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: conecteme_backend
    env_file:
      - .env
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - OAUTH42_CLIENT_ID=${OAUTH42_CLIENT_ID}
      - OAUTH42_CLIENT_SECRET=${OAUTH42_CLIENT_SECRET}
      - OAUTH42_REDIRECT_URI=${OAUTH42_REDIRECT_URI}
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,conecteme_backend

    ports:
      - "8000:8000"
    depends_on:
      - db

    volumes:
      - media_data:/app/media

    networks:
      - conecteme_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: conecteme_frontend
    ports:
      - "80"
    depends_on:
      - backend
    networks:
      - conecteme_network

  proxy:
    image: nginx:alpine
    container_name: conecteme_proxy
    # On copie le nginx.conf et on monte le dossier certs
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - media_data:/app/media
    ports:
      - "8443:443"
    depends_on:
      - frontend
      - backend

    networks:
      - conecteme_network

networks:
  conecteme_network:
    driver: bridge

volumes:
  postgres_data:
  media_data:# nginx.conf
events {
    worker_connections 1024;
}

http {
    # Éviter les attaques MIME type
    include       mime.types;
    default_type  application/octet-stream;

    # Log minimal
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;

    # Serveur HTTPS local
    server {
        listen 443 ssl;
        server_name localhost;

        # Emplacements des certificats
        ssl_certificate     /etc/nginx/certs/localhost.crt;
        ssl_certificate_key /etc/nginx/certs/localhost.key;

        # SSL Settings (versions / ciphers minimales)
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # --- Nouveaux blocs pour servir privacy.html et terms.html ---
        location = /privacy.html {
            proxy_pass http://conecteme_frontend:80/privacy.html;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

        location = /terms.html {
            proxy_pass http://conecteme_frontend:80/terms.html;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

        # Proxy pass vers votre container frontend
        location / {
            # Redirection du trafic principal vers le frontend (port 80)
            proxy_pass http://conecteme_frontend:80;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

        # Redirection spécifique pour la route /auth/signup/
        location /auth/signup/ {
            proxy_pass http://conecteme_backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

        location /auth/42/ {
            proxy_pass http://conecteme_backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

        # NOUVEAU : LOGIN
        location /auth/login/ {
            proxy_pass http://conecteme_backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-For $remote_addr;
        }        

        # Bloc pour les routes 2FA
        location /auth/2fa/ {
            proxy_pass http://conecteme_backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

        # --- Bloc pour servir les fichiers médias ---
        location /media/ {
            alias /app/media/;
            # Assurez-vous que le volume "media" est bien monté dans le container Nginx
        }

        location /auth/user/ {
            proxy_pass http://conecteme_backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-For $remote_addr;
        }


    }
}FROM nginx:alpine

WORKDIR /usr/share/nginx/html
COPY *.html .
COPY static ./static

# Nginx par défaut écoute sur le port 80
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Pong</title>
    <!-- Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-KyZXEAg3QhqLMpG8r+8fhAXLRfu8m1L/J1Rv2hFpgb8si5+KclW5hqIcWPL6jIoS"
      crossorigin="anonymous"
    />
    <!-- Custom CSS -->
    <link rel="stylesheet" href="static/css/main.css" />
    <!-- Bootstrap Icons -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css"
      rel="stylesheet"
    />
  </head>
  <body class="bg-gradient">
    <!-- Bloc “titre” au-dessus du container -->
    <div class="title-block text-center">
      <!-- Image ou logo “PONG” -->
      <img
        src="/static/img/Game_anime.png"
        alt="Game Title"
        class="img-fluid"
      />
    </div>

    <!-- Container principal -->
    <div class="container text-center bg-white shadow-lg rounded p-4 welcome-container">
      <p class="text-muted">Please sign in to continue</p>
      <h1 class="display-6 text-primary"></h1>

      <!-- Ligne 1: Boutons Login et Sign Up -->
      <div class="btn-group w-100 mb-3 d-flex" role="group">
        <button
          id="login-btn"
          class="btn active d-flex align-items-center justify-content-center"
          style="font-size: 16px; flex: 1; border-radius: 9px; border: none;"
        >
          <i class="bi bi-box-arrow-in-right" style="font-size: 20px; margin-right: 8px;"></i>
          Login
        </button>
        <button
          id="signup-btn"
          class="btn d-flex align-items-center justify-content-center"
          style="font-size: 16px; flex: 1; border-radius: 9px; border: none;"
        >
          <i class="bi bi-person-plus" style="font-size: 20px; margin-right: 8px;"></i>
          Sign Up
        </button>
      </div>

      <!-- Ligne 2: Case à cocher et texte en deux lignes -->
      <div class="tos-container mb-3">
        <div class="tos-line">
          <input type="checkbox" id="tos-checkbox" />
          <label for="tos-checkbox">I have read and agree to the</label>
        </div>
        <div class="tos-links">
          <a href="terms.html" target="_blank">Terms of Service</a>
          <span> and </span>
          <a href="privacy.html" target="_blank">Privacy Policy</a>
        </div>
      </div>

      <!-- Ligne 3: Texte RGPD -->
      <p class="gdpr-text mb-3">Your data is processed according to GDPR regulations.</p>

      <!-- Ligne 4: Bouton "Sign in with 42" -->
      <button id="connect-42" class="auth-button">
        <span>SIGN IN WITH</span>    
        <img src="static/img/42_logo.png" alt="42 Logo" />
      </button>
    </div>

    <!-- Bootstrap JS -->
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"
    ></script>
    <!-- Custom JS -->
    <script src="static/js/main.js"></script>
  </body>
</html>
<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <title>Créer un compte</title>

    <!-- Bootstrap CSS -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    />
    <!-- Bootstrap Icons -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"
    />
    <!-- Votre CSS personnalisé -->
    <link rel="stylesheet" href="static/css/signup.css" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  </head>
  <body class="bg-light fade-in">
    <div class="container d-flex justify-content-center align-items-center min-vh-100">
      <div class="card shadow p-4" style="max-width: 500px; width: 100%;">
        <div class="card-header bg-white text-center">
          <h2 class="mb-0">Créer un compte</h2>
          <p class="text-muted">Entrez vos informations pour commencer</p>
        </div>

        <div class="card-body">
          <form
            id="signup-form"
            action="https://localhost:8443/auth/signup/"
            method="POST"
            class="needs-validation"
            novalidate
            enctype="multipart/form-data"
          >
            <!-- Aperçu Avatar -->
            <div class="mb-3 d-flex justify-content-center">
              <div
                class="position-relative avatar-preview rounded-circle border border-2 border-dashed text-center"
              >
                <i
                  class="bi bi-camera"
                  id="camera-icon"
                  style="font-size: 2rem; color: #6c757d;"
                ></i>
                <img
                  id="avatar-img"
                  src="#"
                  alt="Aperçu de l'avatar"
                  class="d-none"
                />
                <input
                  type="file"
                  id="avatar"
                  name="avatar"
                  accept="image/*"
                  class="position-absolute w-100 h-100 top-0 start-0 opacity-0"
                  style="cursor: pointer;"
                />
              </div>
            </div>

            <!-- Champ Pseudo -->
            <div class="mb-3">
              <label for="pseudo" class="form-label">Pseudo</label>
              <input
                type="text"
                class="form-control"
                id="pseudo"
                name="pseudo"
                placeholder="johndoe"
                required
                minlength="3"
                maxlength="20"
              />
              <div class="invalid-feedback">
                Le pseudo doit contenir entre 3 et 20 caractères.
              </div>
            </div>

            <!-- Champ Prénom -->
            <div class="mb-3">
              <label for="firstname" class="form-label">Prénom</label>
              <input
                type="text"
                class="form-control"
                id="firstname"
                name="firstname"
                placeholder="John"
                required
                minlength="2"
                maxlength="50"
              />
              <div class="invalid-feedback">
                Le prénom doit contenir entre 2 et 50 caractères.
              </div>
            </div>

            <!-- Champ Email -->
            <div class="mb-3">
              <label for="email" class="form-label">Adresse e-mail</label>
              <input
                type="email"
                class="form-control"
                id="email"
                name="email"
                placeholder="john.doe@example.com"
                required
              />
              <div class="invalid-feedback">
                Veuillez saisir une adresse e-mail valide.
              </div>
            </div>

            <!-- Champ Mot de passe -->
            <div class="mb-3">
              <label for="password" class="form-label">Mot de passe</label>
              <div class="input-group">
                <input
                  type="password"
                  class="form-control"
                  id="password"
                  name="password"
                  required
                  minlength="8"
                  pattern="(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9]).{8,}"
                  placeholder="••••••••"
                />
                <button
                  class="btn btn-outline-secondary"
                  type="button"
                  id="togglePassword"
                >
                  <i class="bi bi-eye"></i>
                </button>
                <div class="invalid-feedback">
                  Le mot de passe doit contenir au moins 8 caractères,
                  une majuscule, une minuscule, un chiffre et un caractère spécial.
                </div>
              </div>
              <small class="form-text text-muted">
                Le mot de passe doit contenir au moins 8 caractères, une majuscule,
                une minuscule, un chiffre et un caractère spécial.
              </small>
            </div>

            <!-- Champ Confirmation du mot de passe -->
            <div class="mb-3">
              <label for="confirmPassword" class="form-label">Confirmer le mot de passe</label>
              <div class="input-group">
                <input
                  type="password"
                  class="form-control"
                  id="confirmPassword"
                  name="confirmPassword"
                  required
                  minlength="8"
                  placeholder="••••••••"
                />
                <button
                  class="btn btn-outline-secondary"
                  type="button"
                  id="toggleConfirmPassword"
                >
                  <i class="bi bi-eye"></i>
                </button>
                <div class="invalid-feedback">
                  Les mots de passe ne correspondent pas.
                </div>
              </div>
            </div>

            <!-- CASE RGPD -->
            <div class="mb-3 terms-container">
              <div class="form-check">
                <input
                  type="checkbox"
                  class="form-check-input"
                  id="terms-checkbox"
                />
                <label class="form-check-label" for="terms-checkbox">
                  I have read and agree to the
                </label>
              </div>
              <div class="terms-links">
                <a href="/terms.html" target="_blank">Terms of Service</a>
                and
                <a href="privacy.html" target="_blank">Privacy Policy</a>.
              </div>
            </div>

            <!-- Bouton de soumission (désactivé par défaut) -->
            <button type="submit" class="btn btn-primary w-100" disabled>
              S'inscrire
            </button>
          </form>
        </div>
      </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Script Custom -->
    <script src="static/js/signup.js"></script>
  </body>
</html>
<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <title>Définir votre mot de passe - SIGN IN 42</title>
    <!-- Vous pouvez réutiliser le CSS de signup.css -->
    <link rel="stylesheet" href="static/css/signup.css" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- Bootstrap et Bootstrap Icons (optionnel si déjà inclus) -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"
    />
  </head>
  <body class="bg-light">
    <div class="container d-flex justify-content-center align-items-center min-vh-100">
      <div class="card shadow p-4" style="max-width: 500px; width: 100%;">
        <div class="card-header bg-white text-center">
          <h2 class="mb-0">Définir votre mot de passe</h2>
          <p class="text-muted">Créez un mot de passe pour votre compte 42</p>
        </div>

        <div class="card-body">
          <form id="signin42-form" class="needs-validation" novalidate>
            <!-- Champ Mot de passe -->
            <div class="mb-3">
              <label for="password" class="form-label">Mot de passe</label>
              <div class="input-group">
                <input
                  type="password"
                  class="form-control"
                  id="password"
                  name="password"
                  required
                  minlength="8"
                  pattern="(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9]).{8,}"
                  placeholder="••••••••"
                />
                <button class="btn btn-outline-secondary" type="button" id="togglePassword">
                  <i class="bi bi-eye"></i>
                </button>
                <div class="invalid-feedback">
                  Le mot de passe doit contenir au moins 8 caractères, une majuscule, un chiffre et un caractère spécial.
                </div>
              </div>
            </div>

            <!-- Champ Confirmation du mot de passe -->
            <div class="mb-3">
              <label for="confirmPassword" class="form-label">Confirmer le mot de passe</label>
              <div class="input-group">
                <input
                  type="password"
                  class="form-control"
                  id="confirmPassword"
                  name="confirmPassword"
                  required
                  minlength="8"
                  placeholder="••••••••"
                />
                <button class="btn btn-outline-secondary" type="button" id="toggleConfirmPassword">
                  <i class="bi bi-eye"></i>
                </button>
                <div class="invalid-feedback">
                  Les mots de passe ne correspondent pas.
                </div>
              </div>
            </div>

            <!-- Bouton de soumission (désactivé par défaut) -->
            <button type="submit" class="btn btn-primary w-100" disabled>
              Valider
            </button>
          </form>
        </div>
      </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Script de gestion de la page signin42 -->
    <script src="static/js/signin42.js"></script>
  </body>
</html>
document.addEventListener('DOMContentLoaded', () => {
  const loginBtn = document.getElementById('login-btn');
  const signupBtn = document.getElementById('signup-btn');
  const connect42Btn = document.getElementById('connect-42');
  const userIcon = document.querySelector('.user-icon');
  const creditsBtn = document.getElementById('credits-btn');
  const setupBtn = document.getElementById('setup-btn');
  const statsBtn = document.getElementById('stats-btn');
  const exitBtn = document.getElementById('exit-btn');

  if (exitBtn) {
    exitBtn.addEventListener('click', () => {
      // Redirige vers index.html
      window.location.href = 'index.html';
    });
  }

  if (userIcon) {
    userIcon.addEventListener('click', () => {
      // Redirection vers user.html
      window.location.href = 'user.html';
    });
  }

  if (setupBtn) {
    setupBtn.addEventListener('click', () => {
      // Redirection vers la page game_setup.html
      window.location.href = 'game_setup.html';
    });
  }

  if (statsBtn) {
    statsBtn.addEventListener('click', () => {
      // Redirection vers stats_page.html
      window.location.href = 'stats_page.html';
    });
  }

  if (creditsBtn) {
    creditsBtn.addEventListener('click', () => {
      // Redirection vers team.html
      window.location.href = 'team.html';
    });
  }

  // ====== GESTION DU BOUTON LOGIN ======
  if (loginBtn) {
    loginBtn.addEventListener('click', () => {
      // Ajoute la classe d’état "active"
      loginBtn.classList.add('btn-primary');
      signupBtn?.classList.remove('btn-primary');
      // Redirection vers login.html
      window.location.href = '/login.html';
    });
  }

  // ====== GESTION DU BOUTON SIGNUP ======
  if (signupBtn) {
    signupBtn.addEventListener('click', () => {
      // Ajoute la classe d’état "active"
      signupBtn.classList.add('btn-primary');
      loginBtn?.classList.remove('btn-primary');
      // Redirection vers signup.html
      window.location.href = 'signup.html';
    });
  }

  // ====== GESTION DU BOUTON "CONNECT-42" ======
  if (connect42Btn) {
    connect42Btn.addEventListener('click', () => {
      // Redirection vers la page de saisie du mot de passe pour 42
      window.location.href = 'signin42.html';
    });
  }

  // ====== GESTION DE LA RÉCUPÉRATION DU JWT (SI RETOUR OAUTH) ======
  const urlParams = new URLSearchParams(window.location.search);
  const jwt = urlParams.get('jwt');
  if (jwt) {
    const container = document.querySelector('.container');
    if (container) {
      localStorage.setItem('jwt', jwt);
    }
  }

  // ====== GESTION DE LA CASE À COCHER POUR LES POLITIQUES (TOS & Privacy) ======
  const tosCheckbox = document.getElementById('tos-checkbox');
  if (tosCheckbox && connect42Btn) {
    // Désactiver le bouton dès le chargement de la page
    connect42Btn.disabled = true;
    connect42Btn.classList.add('disabled');

    tosCheckbox.addEventListener('change', () => {
      if (tosCheckbox.checked) {
        connect42Btn.disabled = false;
        connect42Btn.classList.remove('disabled');
      } else {
        connect42Btn.disabled = true;
        connect42Btn.classList.add('disabled');
      }
    });
  }

  // --- Nouveau code pour mettre à jour le username et la photo de profil dans user.html ---
  if (window.location.href.includes('user.html')) {
    const playerNameElement = document.querySelector('.player-name');
    const profileImageElement = document.getElementById('profile-image');
    if (playerNameElement && profileImageElement) {
      fetch('/auth/user/', { credentials: 'include' })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          if (data.username) {
            playerNameElement.textContent = data.username;
          } else {
            playerNameElement.textContent = 'Error loading username';
          }
          if (data.profile_image) {
            profileImageElement.src = data.profile_image;
          }
        })
        .catch(error => {
          console.error('Error fetching user info:', error);
          playerNameElement.textContent = 'Error loading username';
          // Utiliser l'avatar par défaut en cas d'erreur
          profileImageElement.src = '/static/img/default-avatar.png';
        });
    }
  }


});
document.addEventListener('DOMContentLoaded', () => {
    const signupForm = document.getElementById('signup-form');

    // --- Gestion de l'aperçu de l'avatar ---
    const avatarInput = document.getElementById('avatar');
    const avatarImg = document.getElementById('avatar-img');
    const cameraIcon = document.getElementById('camera-icon');

    avatarInput.addEventListener('change', (e) => {
      const file = e.target.files && e.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (event) => {
          avatarImg.src = event.target.result;
          avatarImg.classList.remove('d-none');
          cameraIcon.classList.add('d-none');
        };
        reader.readAsDataURL(file);
      } else {
        avatarImg.src = '#';
        avatarImg.classList.add('d-none');
        cameraIcon.classList.remove('d-none');
      }
    });

    // --- Gestion de l'affichage/masquage du mot de passe ---
    const passwordInput = document.getElementById('password');
    const togglePasswordBtn = document.getElementById('togglePassword');
    togglePasswordBtn.addEventListener('click', () => {
      const isPassword = passwordInput.type === 'password';
      passwordInput.type = isPassword ? 'text' : 'password';
      const icon = togglePasswordBtn.querySelector('i');
      icon.classList.toggle('bi-eye');
      icon.classList.toggle('bi-eye-slash');
    });

    const confirmInput = document.getElementById('confirmPassword');
    const toggleConfirmBtn = document.getElementById('toggleConfirmPassword');
    toggleConfirmBtn.addEventListener('click', () => {
      const isPassword = confirmInput.type === 'password';
      confirmInput.type = isPassword ? 'text' : 'password';
      const icon = toggleConfirmBtn.querySelector('i');
      icon.classList.toggle('bi-eye');
      icon.classList.toggle('bi-eye-slash');
    });

    // --- Activation du bouton "S'inscrire" en fonction de la case RGPD ---
    const termsCheckbox = document.getElementById('terms-checkbox');
    const submitButton = document.querySelector('button[type="submit"]');
    // Assurez-vous que le bouton reste désactivé tant que la case n'est pas cochée
    submitButton.disabled = !termsCheckbox.checked;

    termsCheckbox.addEventListener('change', () => {
      submitButton.disabled = !termsCheckbox.checked;
    });

    // --- Soumission du formulaire ---
    signupForm.addEventListener('submit', (e) => {
      e.preventDefault();

      // Vérification de la correspondance des mots de passe
      if (passwordInput.value !== confirmInput.value) {
        confirmInput.setCustomValidity("Les mots de passe ne correspondent pas.");
      } else {
        confirmInput.setCustomValidity("");
      }

      // Validation côté client
      if (!signupForm.checkValidity()) {
        signupForm.classList.add('was-validated');
        return;
      }

      // Création de l'objet FormData (incluant l'image)
      const formData = new FormData(signupForm);

      // Envoi de la requête POST au backend
      fetch('https://localhost:8443/auth/signup/', {
        method: 'POST',
        body: formData,
      })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            alert(data.detail);
            window.location.href = '/index.html';
          } else {
            alert(`Erreur : ${data.error}`);
          }
        })
        .catch(err => {
          console.error("Erreur réseau :", err);
          alert("Une erreur réseau s'est produite. Veuillez réessayer plus tard.");
        });
    });
});
# Utiliser une image Python légère
FROM python:3.10-alpine

# Créer un répertoire de travail
WORKDIR /app

# Installer les dépendances système nécessaires
RUN apk update && apk add --no-cache \
    postgresql-client \              
    postgresql-dev \                 
    gcc \                            
    musl-dev \                       
    libffi-dev \                     
    openssl-dev \                    
    zlib-dev \                       
    jpeg-dev \                       
    freetype-dev \                   
    lcms2-dev \                      
    tiff-dev \                       
    py3-pip \                        
    python3-dev \                    
    build-base \                     
    curl \                           
    bash                            


# Copier les fichiers de configuration
COPY requirements.txt .

# Installer les dépendances Python
RUN pip install --no-cache-dir -r requirements.txt

# Nettoyer le cache pour réduire la taille de l'image
RUN apk del gcc musl-dev libffi-dev openssl-dev && rm -rf /var/cache/apk/*

# Copier le code source du backend
COPY . /app

# Exposer le port 8000
EXPOSE 8000

# Lancer le serveur Django
CMD ["sh", "-c", "while ! nc -z db 5432; do sleep 1; done; python manage.py migrate && python manage.py runserver 0.0.0.0:8000"]
#!/usr/bin/env python
import os
import sys

def main():
    """Point d'entrée principal pour les commandes Django."""
    # Définit les paramètres du projet Django
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'conecte_me_backend.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Impossible d'importer Django. Assurez-vous qu'il est installé "
            "et que le virtualenv est activé. Consultez les dépendances "
            "dans requirements.txt."
        ) from exc
    execute_from_command_line(sys.argv)

if __name__ == '__main__':
    main()
# backend/conecte_me_backend/settings.py


import os
from pathlib import Path
import logging


# Définition du répertoire de base du projet
BASE_DIR = Path(__file__).resolve().parent.parent

# Clé secrète (à garder secrète en production)
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'unsafe-secret-key')

# Mode débogage
DEBUG = os.environ.get('DEBUG', '1') == '1'

# Configuration des hôtes autorisés
ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Applications installées
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Applications tierces
    'rest_framework',
    'oauth2_provider',

    # Applications personnalisées
    'oauth_app',
]

# Middleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Configuration des URL
ROOT_URLCONF = 'conecte_me_backend.urls'

# Configuration des templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
            BASE_DIR / 'oauth_app' / 'templates',  # Ajout du dossier des templates de 2FA
        ],

        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Configuration WSGI
WSGI_APPLICATION = 'conecte_me_backend.wsgi.application'

# Configuration de la base de données
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', 'conecteme_db'),
        'USER': os.environ.get('POSTGRES_USER', 'conecteme_user'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'conecteme_password'),
        'HOST': os.environ.get('POSTGRES_HOST', 'db'),
        'PORT': os.environ.get('POSTGRES_PORT', '5432'),
    }
}

# Configuration des mots de passe
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Paramètres de localisation
LANGUAGE_CODE = 'fr-fr'
TIME_ZONE = 'Europe/Paris'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Configuration des fichiers statiques
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Configuration des fichiers médias
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Configuration des backends d'authentification
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'oauth2_provider.backends.OAuth2Backend',
)

# Configuration des paramètres OAuth2
OAUTH2_PROVIDER = {
    'ACCESS_TOKEN_EXPIRE_SECONDS': 3600,
    'AUTHORIZATION_CODE_EXPIRE_SECONDS': 600,
    'OAUTH2_BACKEND_CLASS': 'oauth2_provider.oauth2_backends.OAuthLibCore',
    'OAUTH2_VALIDATOR_CLASS': 'oauth2_provider.oauth2_validators.OAuth2Validator',
    'SCOPES': {'public': 'Accès public'},
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    ),
}

# Configuration des informations client OAuth2
OAUTH42_WEBSITE = 'https://localhost:8443'
OAUTH42_CLIENT_ID = 'u-s4t2ud-212adcc9d7bcdde9f1b4072ac7e13a17ce8c3493475514c9c139b3f993a243a6'
OAUTH42_CLIENT_SECRET = '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'
OAUTH42_REDIRECT_URI = 'https://localhost:8443/auth/42/callback'
OAUTH42_AUTH_URL = 'https://api.intra.42.fr/oauth/authorize'
OAUTH42_TOKEN_URL = 'https://api.intra.42.fr/oauth/token'
OAUTH42_USER_URL = 'https://api.intra.42.fr/v2/me'

# Configuration des e-mails
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'webmaster@localhost'

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
logger.debug(f"Connecting to DB: {DATABASES['default']}")
from django.contrib import admin
from django.urls import path, include
from oauth_app import views  # Remplacez par le nom correct de l'application contenant la vue
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('auth/', include('oauth_app.urls')),  # Toutes les routes d’authentification et 2FA
    path('auth/42/', include('oauth_app.urls')),  # Routes d’auth OAuth 42
    path('auth/signup/', views.signup_view, name='signup'),  # Ajoutez cette ligne
    
    # AJOUTER la ligne ci-dessous (ou le merge dans votre existant):
    path('auth/login/', views.login_view, name='login'),     # /auth/login/
]

# Ajout de la configuration pour servir les fichiers médias en développement
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'conecte_me_backend.settings')

application = get_wsgi_application()
from django.db import models
from django.contrib.auth.hashers import make_password

class User42(models.Model):
    user_id = models.IntegerField(unique=True)
    username = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)
    first_name = models.CharField(max_length=50, null=False, default="Unknown")
    email_address = models.EmailField(unique=True, null=False, default="placeholder@example.com")
    password = models.CharField(max_length=128, null=False, default="to_be_hashed")

    # Champs pour l'authentification 2FA
    totp_secret = models.CharField(max_length=32, blank=True, null=True)
    is_2fa_enabled = models.BooleanField(default=False)

    # Nouveau champ pour l'image de profil
    profile_image = models.ImageField(
        upload_to='profile_pictures/',
        default='profile_pictures/default_avatar.png'
    )

    def __str__(self):
        return f"{self.username} ({self.email_address})"

    def set_password(self, raw_password: str):
        self.password = make_password(raw_password)
# backend/oauth_app/urls.py
from django.urls import path
from .views import (
    redirect_to_42,
    callback_42,
    signup_view,
    login_view,
    user_info,  # <--- Import de la nouvelle vue
    upload_avatar_view,
)
from . import twofa_views

urlpatterns = [
    path('signup/', signup_view, name='signup'),
    path('login/', login_view, name='login'),
    path('login-42/', redirect_to_42, name='redirect_to_42'),
    path('callback', callback_42, name='callback_42'),
    path('2fa/setup/', twofa_views.two_factor_setup, name='two_factor_setup'),
    path('2fa/validate/', twofa_views.two_factor_validate, name='two_factor_validate'),
    # Nouvelle route pour récupérer le username
    path('user/', user_info, name='user_info'),

    path('user/upload_avatar/', upload_avatar_view, name='upload_avatar'),

]
import os
import jwt
import datetime

def generate_jwt(user_id, username):
    secret_key = os.environ.get('SECRET_KEY', 'unsafe-default-key')
    expiration = datetime.datetime.utcnow() + datetime.timedelta(hours=1)
    payload = {
        'user_id': user_id,
        'username': username,
        'exp': expiration,
        'iss': 'ConecteMe'
    }
    token = jwt.encode(payload, secret_key, algorithm='HS256')
    return token
import os
import requests
import jwt
import datetime
import requests
import re


from django.shortcuts import redirect, render
from django.http import JsonResponse, HttpResponseRedirect
from django.urls import reverse
from django.utils.crypto import get_random_string
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth.hashers import check_password, make_password
from django.db import IntegrityError, transaction

from django.middleware.csrf import get_token
from django.contrib import messages

from .models import User42
from .utils import generate_jwt

# Ajout de la gestion des logs
import logging
logger = logging.getLogger(__name__)

# Récupération des variables d'env
CLIENT_ID = os.environ.get('OAUTH42_CLIENT_ID')
CLIENT_SECRET = os.environ.get('OAUTH42_CLIENT_SECRET')
REDIRECT_URI = os.environ.get('OAUTH42_REDIRECT_URI')
TOKEN_URL = "https://api.intra.42.fr/oauth/token"
AUTHORIZE_URL = "https://api.intra.42.fr/oauth/authorize"

def redirect_to_42(request):
    """
    Redirige vers la page d'authentification 42 en utilisant
    Authorization Code Grant. On génère un state random pour la protection CSRF.
    """
    state = get_random_string(32)
    request.session['oauth_state'] = state

    params = {
        'client_id': CLIENT_ID,
        'redirect_uri': REDIRECT_URI,
        'response_type': 'code',
        'scope': 'public',
        'state': state,
    }
    # Construction de l'URL d'authentification
    query_string = "&".join([f"{k}={v}" for k, v in params.items()])
    auth_url = f"{AUTHORIZE_URL}?{query_string}"
    return redirect(auth_url)


def callback_42(request):
    """
    Gère le callback après authentification 42.
    Échange le code reçu contre un token, récupère les infos utilisateur et,
    si un mot de passe temporaire a été défini via signin42, l'utilise pour mettre à jour le compte.
    """
    # Vérification du state
    state_session = request.session.get('oauth_state')
    state_request = request.GET.get('state')
    if not state_session or state_session != state_request:
        return JsonResponse({"error": "Invalid state"}, status=400)

    code = request.GET.get('code')
    if not code:
        return JsonResponse({"error": "No code provided"}, status=400)

    # Échange du code contre un access token
    data = {
        'grant_type': 'authorization_code',
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'code': code,
        'redirect_uri': REDIRECT_URI,
    }
    try:
        response = requests.post(TOKEN_URL, data=data)
        token_data = response.json()
        access_token = token_data.get('access_token')
        if not access_token:
            return JsonResponse({"error": "Failed to retrieve access token"}, status=400)
    except Exception as e:
        return JsonResponse({"error": str(e)}, status=400)

    # Récupération des infos utilisateur depuis l'API 42
    user_info_url = "https://api.intra.42.fr/v2/me"
    headers = {
        'Authorization': f"Bearer {access_token}"
    }
    user_resp = requests.get(user_info_url, headers=headers)
    if user_resp.status_code != 200:
        return JsonResponse({"error": "Failed to retrieve user info"}, status=400)

    user_data = user_resp.json()
    user_id_42 = user_data['id']
    user_name_42 = user_data['login']

    # Récupération de l'email et du prénom depuis l'API 42
    email_from_api = user_data.get('email')
    first_name_from_api = user_data.get('first_name')

    # Si l'API ne fournit pas ces informations, on utilise des valeurs par défaut.
    email_value = email_from_api if email_from_api else 'placeholder@example.com'
    first_name_value = first_name_from_api if first_name_from_api else 'Unknown'

    try:
        with transaction.atomic():
            # Récupération éventuelle d'un mot de passe temporaire défini via signin42
            temp_password = request.session.get('temp_hashed_password')

            # Recherche de l'utilisateur par email (champ unique dans notre cas)
            user = User42.objects.filter(email_address=email_value).first()
            if user:
                # L'utilisateur existe déjà : on met à jour ses infos si nécessaire
                if (email_from_api and email_from_api != user.email_address) or \
                   (first_name_from_api and first_name_from_api != user.first_name):
                    user.email_address = email_from_api or user.email_address
                    user.first_name = first_name_from_api or user.first_name
                # Si un mot de passe temporaire est présent, on l'utilise pour mettre à jour le mot de passe
                if temp_password:
                    user.password = temp_password
                    del request.session['temp_hashed_password']
                user.save()
            else:
                # L'utilisateur n'existe pas encore : on lui attribue un user_id unique
                existing_ids = list(User42.objects.values_list('user_id', flat=True))
                sorted_ids = sorted(existing_ids)
                new_user_id = 0
                for uid in sorted_ids:
                    if uid == new_user_id:
                        new_user_id += 1
                    else:
                        break

                user = User42(
                    user_id=new_user_id,
                    username=user_name_42,
                    email_address=email_value,
                    first_name=first_name_value,
                )
                # Si un mot de passe temporaire a été défini, on l'utilise dès la création
                if temp_password:
                    user.password = temp_password
                    del request.session['temp_hashed_password']
                user.save()
    except IntegrityError:
        return JsonResponse({"error": "Erreur lors de l'inscription de l'utilisateur"}, status=400)

    # Mise à jour de la session
    request.session['user_id'] = user.pk
    request.session['email'] = user.email_address

    # Génération d'un JWT pour la session
    jwt_token = generate_jwt(user_id=user_id_42, username=user_name_42)

    # Redirection côté frontend vers l'interface de jeu, en transmettant le token
    response = HttpResponseRedirect(f"https://localhost:8443/game_interface.html?jwt={jwt_token}")
    return response

# --- Vue d'inscription modifiée pour gérer l'upload de l'image de profil ---
@csrf_exempt
def signup_view(request):
    if request.method == 'POST':
        # Récupération des données du formulaire
        first_name   = request.POST.get('firstname')
        email        = request.POST.get('email')
        raw_password = request.POST.get('password')
        pseudo       = request.POST.get('pseudo', '')

        # Vérification que tous les champs requis sont présents
        if not all([first_name, email, raw_password]):
            return JsonResponse(
                {"success": False, "error": "Tous les champs requis ne sont pas remplis."},
                status=400
            )

        # Gestion de l'image de profil
        profile_image = request.FILES.get('avatar')
        if profile_image:
            # Limiter la taille du fichier à 2MB
            if profile_image.size > 2 * 1024 * 1024:
                return JsonResponse(
                    {"success": False, "error": "La taille de l'image ne doit pas dépasser 2MB."},
                    status=400
                )
            # Vérifier le type MIME (seuls JPEG et PNG sont acceptés)
            if profile_image.content_type not in ['image/jpeg', 'image/png']:
                return JsonResponse(
                    {"success": False, "error": "Format d'image non supporté. Seul JPEG et PNG sont autorisés."},
                    status=400
                )

        try:
            with transaction.atomic():
                # Récupérer tous les user_id existants
                existing_ids = list(User42.objects.values_list('user_id', flat=True))
                # Trier les IDs pour faciliter la recherche de la plus petite valeur manquante
                sorted_ids = sorted(existing_ids)

                # Déterminer le plus petit user_id disponible
                new_user_id = 0
                for uid in sorted_ids:
                    if uid == new_user_id:
                        new_user_id += 1
                    else:
                        # Dès qu'on trouve un gap, on arrête : new_user_id est disponible
                        break

                # Création de l'utilisateur avec le user_id trouvé
                user = User42(
                    user_id=new_user_id,
                    username=pseudo or email.split('@')[0],
                    first_name=first_name,
                    email_address=email,
                )
                user.password = make_password(raw_password)
                if profile_image:
                    user.profile_image = profile_image
                user.save()

        except IntegrityError:
            # Gestion propre des erreurs transactionnelles pour éviter les conflits d'unicité
            return JsonResponse(
                {"success": False, "error": "Cette adresse e-mail est déjà utilisée."},
                status=400
            )

        return JsonResponse(
            {"success": True, "detail": "Inscription réussie."},
            status=201
        )

    return JsonResponse(
        {"success": False, "error": "Méthode non autorisée."},
        status=405
    )

@csrf_exempt
def login_view(request):
    """
    Vue permettant à l'utilisateur de se connecter avec email + password.
    Retourne un JSON indiquant le succès ou l'échec,
    ainsi qu'une éventuelle URL de redirection.
    """
    if request.method == 'POST':
        email = request.POST.get('email')
        password = request.POST.get('password')

        if not email or not password:
            return JsonResponse({
                "success": False,
                "error": "Champs 'email' et 'password' requis."
            }, status=400)

        # On tente de récupérer l'utilisateur via l’email
        user = User42.objects.filter(email_address=email).first()
        if not user:
            return JsonResponse({
                "success": False,
                "error": "Email ou mot de passe incorrect."
            }, status=401)

        # Vérification du mot de passe
    if check_password(password, user.password):
        # Authentification réussie : stocker l'ID dans la session
        request.session['user_id'] = user.pk
        request.session['email'] = user.email_address
        
        # Vérifier si la 2FA n'est pas activée
        if not user.is_2fa_enabled:
            return JsonResponse({
                "success": True,
                "redirect": "/auth/2fa/setup/"
            }, status=200)
        else:
            return JsonResponse({
                "success": True,
                "redirect": "/game_interface.html"
            }, status=200)

    # Méthode non autorisée
    return JsonResponse({
        "success": False,
        "error": "Méthode non autorisée."
    }, status=405)

# -------------------------------
# Nouvelle vue pour récupérer le username
# -------------------------------
def user_info(request):
    logger.debug("Appel de user_info, session: %s", dict(request.session))
    user_id = request.session.get('user_id')
    if not user_id:
        logger.error("Aucun user_id dans la session !")
        return JsonResponse({'error': 'User not authenticated'}, status=401)
    try:
        user = User42.objects.get(pk=user_id)
        logger.debug("Utilisateur trouvé : %s", user.username)
        return JsonResponse({'username': user.username, 'profile_image': user.profile_image.url})
    except User42.DoesNotExist:
        logger.error("Utilisateur non trouvé pour user_id=%s", user_id)
        return JsonResponse({'error': 'User not found'}, status=404)
    
@csrf_exempt
def upload_avatar_view(request):
    if request.method == 'POST':
        # Vérification de l'authentification via la session
        user_id = request.session.get('user_id')
        if not user_id:
            return JsonResponse({"success": False, "error": "Utilisateur non authentifié."}, status=401)
        try:
            user = User42.objects.get(pk=user_id)
        except User42.DoesNotExist:
            return JsonResponse({"success": False, "error": "Utilisateur non trouvé."}, status=404)

        # Récupération du fichier envoyé
        avatar_file = request.FILES.get('avatar')
        if not avatar_file:
            return JsonResponse({"success": False, "error": "Aucun fichier envoyé."}, status=400)

        # Vérification de la taille (max 2MB)
        if avatar_file.size > 2 * 1024 * 1024:
            return JsonResponse({"success": False, "error": "La taille de l'image ne doit pas dépasser 2MB."}, status=400)
        # Vérification du format (JPEG/PNG)
        if avatar_file.content_type not in ['image/jpeg', 'image/png']:
            return JsonResponse({"success": False, "error": "Format d'image non supporté."}, status=400)

        # Sauvegarde du nouvel avatar dans le modèle (le champ profile_image gère le chemin d'upload)
        user.profile_image = avatar_file
        user.save()

        # Retour de l'URL de la nouvelle image pour mise à jour immédiate côté client
        return JsonResponse({"success": True, "profile_image_url": user.profile_image.url}, status=200)
    else:
        return JsonResponse({"success": False, "error": "Méthode non autorisée."}, status=405)
    
@csrf_exempt
def set_42_password_view(request):
    """
    Réception du mot de passe saisi par l’utilisateur lors de sa première connexion via 42.
    Le mot de passe est validé, haché et stocké temporairement dans la session.
    """
    if request.method == 'POST':
        password = request.POST.get('password')
        confirm = request.POST.get('confirmPassword')

        if not password or not confirm or password != confirm:
            return JsonResponse({"success": False, "error": "Les mots de passe ne correspondent pas."}, status=400)

        # Vérification côté serveur : minimum 8 caractères, 1 majuscule, 1 chiffre, 1 caractère spécial
        pattern = r'^(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9]).{8,}$'
        if not re.match(pattern, password):
            return JsonResponse({"success": False, "error": "Le mot de passe ne respecte pas les critères de sécurité."}, status=400)

        # Hachage sécurisé du mot de passe
        hashed_password = make_password(password)
        # Stockage temporaire dans la session
        request.session['temp_hashed_password'] = hashed_password

        return JsonResponse({
            "success": True,
            "detail": "Mot de passe défini avec succès. Vous allez être redirigé vers l'authentification 42."
        }, status=200)
    else:
        return JsonResponse({"success": False, "error": "Méthode non autorisée."}, status=405)    from django.test import TestCase, Client
from django.urls import reverse
import pyotp
from oauth_app.models import User42

class OAuthFlowTest(TestCase):
    def test_redirect_to_42(self):
        url = reverse('redirect_to_42')
        response = self.client.get(url)
        self.assertEqual(response.status_code, 302)
        self.assertIn("api.intra.42.fr/oauth/authorize", response.url)

class SignupViewTestCase(TestCase):
    def setUp(self):
        self.signup_url = reverse('signup')

    def test_signup_success(self):
        response = self.client.post(self.signup_url, {
            'firstname': 'John',
            'email': 'john.doe@example.com',
            'password': 'StrongP@ssw0rd!',
            'pseudo': 'johndoe'
        })
        self.assertEqual(response.status_code, 201)
        self.assertEqual(response.json().get('success'), True)
        self.assertEqual(User42.objects.count(), 1)
        self.assertEqual(User42.objects.first().email_address, 'john.doe@example.com')

    def test_signup_email_already_exists(self):
        User42.objects.create(
            user_id=1, 
            username='existinguser',
            first_name='Existing', 
            email_address='existing@example.com', 
            password='hashed_password'
        )
        response = self.client.post(self.signup_url, {
            'firstname': 'John',
            'email': 'existing@example.com',
            'password': 'StrongP@ssw0rd!',
            'pseudo': 'johndoe'
        })
        self.assertEqual(response.status_code, 400)
        self.assertEqual(response.json().get('error'), "Cette adresse e-mail est déjà utilisée.")
        self.assertEqual(User42.objects.count(), 1)

    def test_signup_missing_fields(self):
        response = self.client.post(self.signup_url, {
            'firstname': '',
            'email': '',
            'password': ''
        })
        self.assertEqual(response.status_code, 400)
        self.assertIn('error', response.json())

def test_signup_stores_data_in_db(self):
    response = self.client.post(self.signup_url, {
        'firstname': 'Alice',
        'email': 'alice@example.com',
        'password': 'ValidP@ss123',
        'pseudo': 'alice123'
    })
    self.assertEqual(response.status_code, 201)
    user = User42.objects.get(email_address='alice@example.com')
    self.assertEqual(user.first_name, 'Alice')
    self.assertTrue(user.password.startswith('pbkdf2_sha256$'))  # Vérifie que le mot de passe est haché

class TwoFactorAuthTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.user = User42.objects.create(
            user_id=999,
            username="testuser",
            first_name="Test",
            email_address="test@example.com",
            password="fake"  # le mot de passe n'est pas important ici
        )
        # Simuler l'authentification via session
        session = self.client.session
        session['user_id'] = self.user.pk
        session.save()
    
    def test_two_factor_setup(self):
        response = self.client.get(reverse('two_factor_setup'))
        self.assertEqual(response.status_code, 200)
        self.assertIn("QR Code", response.content.decode())
        self.user.refresh_from_db()
        self.assertIsNotNone(self.user.totp_secret)
    
    def test_two_factor_validate_success(self):
        # Appel de la configuration pour générer le secret
        self.client.get(reverse('two_factor_setup'))
        self.user.refresh_from_db()
        totp = pyotp.TOTP(self.user.totp_secret)
        valid_code = totp.now()
        response = self.client.post(reverse('two_factor_validate'), data={'otp_code': valid_code})
        self.assertEqual(response.status_code, 200)
        self.assertIn("succès", response.content.decode())
        self.user.refresh_from_db()
        self.assertTrue(self.user.is_2fa_enabled)
    
    def test_two_factor_validate_failure(self):
        self.client.get(reverse('two_factor_setup'))
        self.user.refresh_from_db()
        invalid_code = "000000"
        response = self.client.post(reverse('two_factor_validate'), data={'otp_code': invalid_code})
        self.assertEqual(response.status_code, 400)
        self.assertIn("invalide", response.content.decode())