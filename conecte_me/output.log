]633;E;docker-compose down -v;195b4d52-96d1-4a0d-aff8-8ddb76130b91]633;CRemoving network conecte_me_conecteme_network
Network conecte_me_conecteme_network not found.
Removing volume conecte_me_postgres_data
Volume conecte_me_postgres_data not found.
.
├── backend
│   ├── conecte_me_backend
│   │   ├── __init__.py
│   │   ├── __pycache__
│   │   │   ├── __init__.cpython-310.pyc
│   │   │   ├── settings.cpython-310.pyc
│   │   │   └── urls.cpython-310.pyc
│   │   ├── settings.py
│   │   ├── urls.py
│   │   └── wsgi.py
│   ├── Dockerfile
│   ├── manage.py
│   ├── oauth_app
│   │   ├── __init__.py
│   │   ├── migrations
│   │   │   ├── 0001_initial.py
│   │   │   ├── 0002_user42_email_address_user42_first_name_and_more.py
│   │   │   ├── __init__.py
│   │   │   └── __pycache__
│   │   │       ├── 0001_initial.cpython-310.pyc
│   │   │       ├── 0002_user42_email_address_user42_first_name_and_more.cpython-310.pyc
│   │   │       └── __init__.cpython-310.pyc
│   │   ├── models.py
│   │   ├── __pycache__
│   │   │   ├── __init__.cpython-310.pyc
│   │   │   ├── models.cpython-310.pyc
│   │   │   ├── tests.cpython-310.pyc
│   │   │   ├── urls.cpython-310.pyc
│   │   │   ├── utils.cpython-310.pyc
│   │   │   └── views.cpython-310.pyc
│   │   ├── tests.py
│   │   ├── urls.py
│   │   ├── utils.py
│   │   └── views.py
│   └── requirements.txt
├── certs
│   ├── localhost.crt
│   └── localhost.key
├── docker-compose.yml
├── frontend
│   ├── confirmation.html
│   ├── Dockerfile
│   ├── game_interface.html
│   ├── index.html
│   ├── login.html
│   ├── signup.html
│   └── static
│       ├── css
│       │   ├── login.css
│       │   ├── main.css
│       │   └── signup.css
│       ├── img
│       │   ├── 42_logo.png
│       │   ├── Game_anime.png
│       │   ├── PONG_Accueil.png
│       │   ├── PONG_seul.png
│       │   ├── return_arrow.png
│       │   ├── Symbole_return.png
│       │   └── User_title.png
│       └── js
│           ├── login.js
│           ├── main.js
│           └── signup.js
├── nginx.conf
├── output.log
└── README.md

13 directories, 53 files
# nginx.conf
events {
    worker_connections 1024;
}

http {
    # Éviter les attaques MIME type
    include       mime.types;
    default_type  application/octet-stream;

    # Log minimal
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;

    # Serveur HTTPS local
    server {
        listen 443 ssl;
        server_name localhost;

        # Emplacements des certificats
        ssl_certificate     /etc/nginx/certs/localhost.crt;
        ssl_certificate_key /etc/nginx/certs/localhost.key;

        # SSL Settings (versions / ciphers minimales)
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Proxy pass vers votre container frontend
        location / {
            # Redirection du trafic principal vers le frontend (port 80)
            proxy_pass http://conecteme_frontend:80;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

        # Redirection spécifique pour la route /auth/signup/
        location /auth/signup/ {
            proxy_pass http://conecteme_backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

        location /auth/42/ {
            proxy_pass http://conecteme_backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

    }
}# Django
SECRET_KEY=change_me_in_production
DEBUG=1

# PostgreSQL
POSTGRES_DB=conecteme_db
POSTGRES_USER=conecteme_user
POSTGRES_PASSWORD=conecteme_password
POSTGRES_HOST=db
POSTGRES_PORT=5432

# OAuth 42
OAUTH42_WEBSITE=https://localhost:8443
OAUTH42_CLIENT_ID=u-s4t2ud-212adcc9d7bcdde9f1b4072ac7e13a17ce8c3493475514c9c139b3f993a243a6
OAUTH42_CLIENT_SECRET=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
OAUTH42_REDIRECT_URI=https://localhost:8443/auth/42/callback
OAUTH42_AUTH_URL=https://api.intra.42.fr/oauth/authorize
OAUTH42_TOKEN_URL=https://api.intra.42.fr/oauth/token
OAUTH42_USER_URL=https://api.intra.42.fr/v2/me


FROM nginx:alpine

WORKDIR /usr/share/nginx/html
COPY *.html .
COPY static ./static

# Nginx par défaut écoute sur le port 80
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <title>Créer un compte</title>

    <!-- Bootstrap CSS -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    />
    <!-- Bootstrap Icons -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"
    />
    <!-- Votre CSS personnalisé -->
    <link rel="stylesheet" href="static/css/signup.css" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  </head>
  <body class="bg-light fade-in">
    <!-- Conteneur principal centré verticalement -->
    <div class="container d-flex justify-content-center align-items-center min-vh-100">
      <!-- Card Bootstrap pour faire un joli encadré -->
      <div class="card shadow p-4" style="max-width: 500px; width: 100%;">
        <div class="card-header bg-white text-center">
          <h2 class="mb-0">Créer un compte</h2>
          <p class="text-muted">Entrez vos informations pour commencer</p>
        </div>

        <div class="card-body">
          <form
            id="signup-form"
            action="https://localhost:8443/signup/""
            method="POST"
            class="needs-validation"
            novalidate
            enctype="multipart/form-data"
          >
            <!-- Aperçu Avatar -->
            <div class="mb-3 d-flex justify-content-center">
              <div
                class="position-relative avatar-preview rounded-circle border border-2 border-dashed text-center"
              >
                <!-- Icône caméra (affichée par défaut) -->
                <i
                  class="bi bi-camera"
                  id="camera-icon"
                  style="font-size: 2rem; color: #6c757d;"
                ></i>
                <!-- Image d’aperçu (cachée au départ) -->
                <img
                  id="avatar-img"
                  src="#"
                  alt="Aperçu de l'avatar"
                  class="d-none"
                />
                <!-- Input file en pleine superposition (invisible) -->
                <input
                  type="file"
                  id="avatar"
                  name="avatar"
                  accept="image/*"
                  class="position-absolute w-100 h-100 top-0 start-0 opacity-0"
                  style="cursor: pointer;"
                />
              </div>
            </div>

            <!-- Champ Pseudo -->
            <div class="mb-3">
              <label for="pseudo" class="form-label">Pseudo</label>
              <input
                type="text"
                class="form-control"
                id="pseudo"
                name="pseudo"
                placeholder="johndoe"
                required
                minlength="3"
                maxlength="20"
              />
              <div class="invalid-feedback">
                Le pseudo doit contenir entre 3 et 20 caractères.
              </div>
            </div>

            <!-- Champ Prénom -->
            <div class="mb-3">
              <label for="firstname" class="form-label">Prénom</label>
              <input
                type="text"
                class="form-control"
                id="firstname"
                name="firstname"
                placeholder="John"
                required
                minlength="2"
                maxlength="50"
              />
              <div class="invalid-feedback">
                Le prénom doit contenir entre 2 et 50 caractères.
              </div>
            </div>

            <!-- Champ Email -->
            <div class="mb-3">
              <label for="email" class="form-label">Adresse e-mail</label>
              <input
                type="email"
                class="form-control"
                id="email"
                name="email"
                placeholder="john.doe@example.com"
                required
              />
              <div class="invalid-feedback">
                Veuillez saisir une adresse e-mail valide.
              </div>
            </div>

            <!-- Champ Mot de passe + note d'aide -->
            <div class="mb-3">
              <label for="password" class="form-label">Mot de passe</label>
              <div class="input-group">
                <input
                  type="password"
                  class="form-control"
                  id="password"
                  name="password"
                  required
                  minlength="8"
                  pattern="(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9]).{8,}"
                  placeholder="••••••••"
                />
                <button
                  class="btn btn-outline-secondary"
                  type="button"
                  id="togglePassword"
                >
                  <i class="bi bi-eye"></i>
                </button>
                <div class="invalid-feedback">
                  Le mot de passe doit contenir au moins 8 caractères,
                  une majuscule, une minuscule, un chiffre et un caractère spécial.
                </div>
              </div>
              <small class="form-text text-muted">
                Le mot de passe doit contenir au moins 8 caractères, une majuscule,
                une minuscule, un chiffre et un caractère spécial.
              </small>
            </div>

            <!-- Champ Confirmation du mot de passe -->
            <div class="mb-3">
              <label for="confirmPassword" class="form-label"
                >Confirmer le mot de passe</label
              >
              <div class="input-group">
                <input
                  type="password"
                  class="form-control"
                  id="confirmPassword"
                  name="confirmPassword"
                  required
                  minlength="8"
                  placeholder="••••••••"
                />
                <button
                  class="btn btn-outline-secondary"
                  type="button"
                  id="toggleConfirmPassword"
                >
                  <i class="bi bi-eye"></i>
                </button>
                <div class="invalid-feedback">
                  Les mots de passe ne correspondent pas.
                </div>
              </div>
            </div>

            <!-- Bouton de soumission -->
            <button type="submit" class="btn btn-primary w-100">
              S'inscrire
            </button>
          </form>
        </div>
      </div>
    </div>

    <!-- Bootstrap JS -->
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
    ></script>
    <!-- Script Custom -->
    <script src="static/js/signup.js"></script>
  </body>
</html>
<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <title>Pong - Interface</title>
  <!-- Bootstrap CSS -->
  <link 
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" 
    rel="stylesheet"
  />
  <!-- Bootstrap Icons (pour l’icône “person-circle” par ex.) -->
  <link 
    rel="stylesheet" 
    href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"
  />

  <style>
    /* -------------------------------------------------------------
       Fonts (à adapter selon l’emplacement de vos fichiers de police)
    ------------------------------------------------------------- */
    @font-face {
      font-family: 'Pong-Game';
      src: url('static/fonts/PongGame.woff2') format('woff2'),
           url('static/fonts/PongGame.woff') format('woff');
      font-weight: normal;
      font-style: normal;
    }
    @font-face {
      font-family: 'NotoSymbols';
      src: url('static/fonts/NotoSansSymbols-Regular.ttf') format('truetype');
    }

    /* -------------------------------------------------------------
       Reset box-sizing
    ------------------------------------------------------------- */
    *,
    *::before,
    *::after {
      box-sizing: border-box;
    }

    /* -------------------------------------------------------------
       Body + fond dégradé
    ------------------------------------------------------------- */
    body {
      margin: 0;
      padding: 0;
      height: 100vh;
      font-family: 'Cantarell', sans-serif;
      background: linear-gradient(135deg, #0f172a, #1e293b);
      display: flex;
      justify-content: center;
      align-items: center;
      color: #f1f5f9;
    }

    /* -------------------------------------------------------------
       Conteneur principal
    ------------------------------------------------------------- */
    .main-container {
      position: relative;
      width: 90%;
      max-width: 1000px;
      margin: 0 auto;
    }

    .rank {
     font-weight: bold;
     margin-left: 15px; /* Ajuste la valeur selon tes besoins */
     margin-right: 8px; /* Ajuste la valeur selon tes besoins */
}

    /* -------------------------------------------------------------
       Titre PONG en dégradé
    ------------------------------------------------------------- */
    .title {
      font-family: "Pong-Game", sans-serif;
      text-align: center;
      margin: 0;
      font-size: 5rem;
      font-weight: bold;

      /* Dégradé de bleu */
      background: linear-gradient(
        to bottom, 
        #3b82f6,  /* Bleu clair */
        #2563eb,  /* Bleu moyen */
        #1e3a8a   /* Bleu foncé */
      );
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      -webkit-text-fill-color: transparent; /* Pour Safari */
      text-shadow: 0 0 15px rgba(59, 130, 246, 0.3);

      /* Espacement des lettres */
      letter-spacing: 15px;
    }

    /* -------------------------------------------------------------
       Icône utilisateur (en haut à droite)
    ------------------------------------------------------------- */
    .user-icon {
      position: absolute;
      top: 0;
      right: 0;
      padding: 1rem;
      font-size: 1.8rem;
      color: #fff;
      cursor: pointer;
      opacity: 0.8;
      transition: opacity 0.3s;
    }
    .user-icon:hover {
      opacity: 1;
    }

    /* -------------------------------------------------------------
       Cartes (Historique des matchs / Classement général)
    ------------------------------------------------------------- */
    .card-custom {
      background: rgba(30, 41, 59, 0.4);

      border-radius: 8px;
      padding: 1rem;

      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }
    .card-header-custom {
      font-size: 1.1rem;
      color: #fff;

      padding-bottom: 0.5rem;
    }
    .list-group-item-custom {
      background: #263246;
      border: none;
      color: #f1f5f9;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.4rem 0;
      border-radius: 8px;
      margin-bottom: 0.5rem; /* Ajoutez cette ligne pour l'espacement */

    }

    .list-group-item-custom:last-child {
     margin-bottom: 0; /* Supprimez la marge en bas du dernier élément */
    }
    
    .list-group-item-custom:not(:last-child) {
      border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    }
    .list-group-item-custom .match-date {
      font-size: 0.7rem;
      opacity: 0.8;
      margin-left: 15px; /* Ajuste la valeur selon tes besoins */
      margin-right: 8px;
    }

    .list-group-item-custom .match-name {
      font-size: 0.9rem;
      align-items: right;
      font-weight: bold;
      opacity: 0.8;
    }


    .list-group-item-custom .match-result {
      font-weight: 600;
      font-size: 0.9rem;
      margin-right: 15px; /* Ajuste la valeur selon tes besoins */
    }

    .list-unstyled mb-0
    /* Surbrillance d’un item particulier (ex: #24 Player123) */
    .highlight {
      background-color: #1c2f60;
    }

    /* -------------------------------------------------------------
       Boutons du bas (“PLAY”, “COMMUNAUTE”, etc.)
    ------------------------------------------------------------- */
    .menu-buttons {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      justify-content: center;
    }
    .menu-button {
      background: rgba(30, 41, 59, 0.8);
      border: 1px solid rgba(51, 65, 85, 0.5);
      border-radius: 8px;
      color: #f1f5f9;
      padding: 0.8rem 1.5rem;
      font-size: 1rem;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      cursor: pointer;
      transition: background-color 0.3s, border-color 0.3s, transform 0.3s;
      min-width: 120px;
    }
    .menu-button i {
      font-size: 1.2rem;
    }
    .menu-button:hover {
      background: rgba(30, 41, 59, 0.9);
      border-color: rgba(51, 65, 85, 0.75);
      transform: scale(1.05);
    }

    .elo-value {
      font-weight: 600;       /* ou bold, selon votre préférence */
      font-size: 1rem;        /* ajustez si vous voulez plus grand/petit */
      color: #ffffff;         /* ou un bleu clair (#60a5fa), etc. */
    }

    .wins-text {
      font-size: 0.7rem;
      color: #cbd5e1;         /* gris clair, par exemple */
      opacity: 0.8;           /* pour un effet plus discret */
      margin-right: 0.7rem;
    }

    .match-info-left {
      display: flex;
      align-items: center;        /* aligne verticalement au centre */
      justify-content: flex-start;/* reste collé à gauche */
      gap: 8px;                   /* espace horizontal entre la date et le nom */
    }


    .elo-container {
      display: inline-block;  /* pour pouvoir fixer une width */
      width: 50px;            /* ajustez selon la taille max (4 chiffres : ~50px) */
      text-align: right;      /* aligne la valeur ELO à droite */
      margin-right: 0.5rem;   /* petit espace après */
    }

    /* -----------------------------------------------------------------
      TABLEAU “custom-table” : Même look que .list-group-item-custom
    ------------------------------------------------------------------- */
    /* On sépare les cellules (et donc les lignes) 
      et on ajoute 0.5rem de marge verticale 
      entre chaque rangée. */
      .custom-table {
      table-layout: fixed;            /* Ajouté */
      border-collapse: separate;
      border-spacing: 0 0.5rem; /* Espace vertical entre les lignes */
      width: 100%;
      background: transparent;  /* Pas de fond imposé pour la table */
    }

    /* Chaque cellule a un fond #263246 
      + un trait de séparation en bas, comme dans .list-group-item-custom */
      .custom-table tbody tr td {
      background-color: #263246; 
      border: none;
  
      /* Optionnel: un peu de padding interne 
        pour que le texte ne soit pas collé. */
      padding: 0.4rem 0.8rem;
      color: #fff;
    }

    .player-name-cell {
      font-size: 0.9rem;
      font-weight: bold;
      opacity: 0.8;

    }

    /* Coins arrondis sur la première et la dernière cellule
      de chaque rangée, ce qui donne 4 coins arrondis à la ligne. */
      .custom-table tbody tr td:first-child {
      border-top-left-radius: 8px;
      border-bottom-left-radius: 8px;
      color: #fff;
    }

    /* Supprimer ce trait sur la dernière ligne du tableau */
    .custom-table tbody tr td:last-child {
      border-top-right-radius: 8px;
      border-bottom-right-radius: 8px;
      color: #fff;
    }

    /* Ligne surbrillée (ex: #24 Player123) */
    .custom-table tbody tr.highlight td {
      background-color: #1c2f60;
      color: #fff;
    }

    /* Optionnel : forcer la largeur d'une colonne 
      par exemple pour le rang, si vous voulez un alignement 
      standard pour #1, #24, etc. 
    */
    .rank-cell {
      width: 50px;
      text-align: left; /* #1, #24 seront alignés à droite */
      padding-right: 8px;
      opacity: 0.8;
      align-items: right;
      font-weight: bold;
    }

    /* Valeur ELO alignée à droite 
      (déjà géré par .text-end dans le HTML).
    */
    .elo-cell {
      text-align: right;
      table-layout: fixed;
      padding: 0.4rem 0.8rem 0.4rem 0.8rem; /* top right bottom left */
      padding-left: 1rem;  /* ou 1.5rem selon l’effet voulu */

      /* plus de width: 10px; à retirer */
      width: 52px;          /* Laisse l’auto, ou fixez p.ex. 50px si vous préférez */
      font-weight: bold;
      opacity: 0.8;
      white-space: nowrap;  /* Pour ne pas couper ELO sur 2 lignes */

    }  

    /* Wins 
      (texte normal, vous pouvez y appliquer 
      la classe .wins-text existante si vous voulez) 
    */
    .wins-cell {
      width: 80px;
      font-size: 0.7rem;
      text-align: right;
      white-space: nowrap;  /* Empêche le renvoi à la ligne */
      opacity: 0.8;
    }

  </style>
</head>

<body>
  <div class="main-container">
    <!-- Icône utilisateur (en haut à droite) -->
    <div class="user-icon">
      <i class="bi bi-person-circle"></i>
    </div>

    <!-- Titre principal -->
    <h1 class="title mb-5">DASHBOARD</h1>

    <!-- Contenu principal en 2 colonnes : Historique + Classement -->
    <div class="row">
      <!-- Colonne gauche : Historique des matchs -->
      <div class="col-12 col-lg-6 mb-4">
        <div class="card-custom">
          <div class="card-header-custom">
            <i class="bi-clock-history"></i>
            Historique des matchs</div>
          <ul class="list-unstyled mb-0">
            <li class="list-group-item-custom">
              <div class="match-info-left">
                <span class="match-date">2025-01-10</span>
                <span class="match-name">ProGamer</span>
              </div>
              <span class="match-result text-success">Victory 11-9</span>
            </li>
            <li class="list-group-item-custom">
              <div class="match-info-left">
                <span class="match-date">2025-01-08</span>
                <span class="match-name">PongMaster</span>
              </div>

              <span class="match-result text-danger">Defeat 9-11</span>
            </li>
            <li class="list-group-item-custom">
              <div class="match-info-left">
                <span class="match-date">2025-01-05</span>
                <span class="match-name">NewPlayer</span>
              </div>

              <span class="match-result text-success">Victory 11-7</span>
            </li>
          </ul>
        </div>
      </div>

      <!-- Colonne droite : Classement général -->
      <div class="col-12 col-lg-6 mb-4">
        <div class="card-custom">
          <div class="card-header-custom">
            <i class="bi-mortarboard"></i>
            Classement général
          </div>
        
          <table class="table table-borderless text-white align-middle mb-0 custom-table">
            <tbody>
              <tr>
                <td class="rank-cell">#1</td>
                <td class="player-name-cell">TopPlayer1</td>
                <td class="elo-cell text-end">1850</td>
                <td class="wins-cell">42 wins</td>
              </tr>
              <tr>
                <td class="rank-cell">#2</td>
                <td class="player-name-cell">TopPlayer2</td>
                <td class="elo-cell text-end">2050</td>
                <td class="wins-cell">142 wins</td>
              </tr>
              <tr>
                <td class="rank-cell">#3</td>
                <td class="player-name-cell">TopPlayer3</td>
                <td class="elo-cell text-end">2000</td>
                <td class="wins-cell">138 wins</td>
              </tr>
              <tr class="highlight">
                <td class="rank-cell">#24</td>
                <td class="player-name-cell">Player123</td>
                <td class="elo-cell text-end">1850</td>
                <td class="wins-cell">42 wins</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- Barre de boutons -->
    <div class="menu-buttons">
      <button class="menu-button">
        <i class="bi bi-controller"></i>
        PLAY
      </button>
      <button class="menu-button">
        <i class="bi-graph-up-arrow"></i>
        PLAYERS STATISTICS
      </button>
      <button class="menu-button">
        <i class="bi bi-people"></i>
        SOCIAL
      </button>
      <button class="menu-button">
        <i class="bi bi-gear"></i>
        SETUP
      </button>
      <button class="menu-button">
        <i class="bi bi-heart"></i>
        CREDITS
      </button>
      <button class="menu-button">
        <i class="bi bi-x-lg"></i>
        EXIT
      </button>
    </div>
  </div>

  <!-- Bootstrap JS (facultatif si vous n’utilisez pas de composants interactifs) -->
  <script 
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js">
  </script>
</body>
</html>
// main.js

document.addEventListener('DOMContentLoaded', () => {
  const loginBtn = document.getElementById('login-btn');
  const signupBtn = document.getElementById('signup-btn');
  const connect42Btn = document.getElementById('connect-42');

  // ====== GESTION DU BOUTON LOGIN ======
  if (loginBtn) {
    loginBtn.addEventListener('click', () => {
      // Ajoute la classe d’état "active"
      loginBtn.classList.add('btn-primary');
      signupBtn?.classList.remove('btn-primary');
      // Ici, vous pouvez rediriger, afficher un modal, etc.
      window.location.href = '/login.html';
    });
  }

  // ====== GESTION DU BOUTON SIGNUP ======
  if (signupBtn) {
    signupBtn.addEventListener('click', () => {
      // Ajoute la classe d’état "active"
      signupBtn.classList.add('btn-primary');
      loginBtn?.classList.remove('btn-primary');

      // EXEMPLE : rediriger vers une page signup.html
      // (À créer ou à remplacer par votre propre route)
      window.location.href = 'signup.html';
    });
  }

  // ====== GESTION DU BOUTON "CONNECT-42" ======
  if (connect42Btn) {
    connect42Btn.addEventListener('click', () => {
      // Redirection vers l'endpoint OAuth 42
      // Adaptez l'URL si nécessaire
      window.location.href = 'https://localhost:8443/auth/42/login-42/';
    });
  }

  // ====== GESTION DE LA RÉCUPÉRATION DU JWT (SI RETOUR OAUTH) ======
  const urlParams = new URLSearchParams(window.location.search);
  const jwt = urlParams.get('jwt');
  if (jwt) {
    const container = document.querySelector('.container');
    if (container) {
      localStorage.setItem('jwt', jwt);
    }
  }
});
document.addEventListener('DOMContentLoaded', () => {
  const signupForm = document.getElementById('signup-form');

  // === Aperçu de l'avatar ===
  const avatarInput = document.getElementById('avatar');
  const avatarImg = document.getElementById('avatar-img');
  const cameraIcon = document.getElementById('camera-icon');

  avatarInput.addEventListener('change', (e) => {
      const file = e.target.files && e.target.files[0];
      if (file) {
          const reader = new FileReader();
          reader.onload = (event) => {
              avatarImg.src = event.target.result;
              avatarImg.classList.remove('d-none');
              cameraIcon.classList.add('d-none');
          };
          reader.readAsDataURL(file);
      } else {
          // Remettre à zéro
          avatarImg.src = '#';
          avatarImg.classList.add('d-none');
          cameraIcon.classList.remove('d-none');
      }
  });

  // === Affichage/masquage du mot de passe ===
  const passwordInput = document.getElementById('password');
  const togglePasswordBtn = document.getElementById('togglePassword');
  togglePasswordBtn.addEventListener('click', () => {
      const isPassword = passwordInput.type === 'password';
      passwordInput.type = isPassword ? 'text' : 'password';
      // Change l’icône
      const icon = togglePasswordBtn.querySelector('i');
      icon.classList.toggle('bi-eye');
      icon.classList.toggle('bi-eye-slash');
  });

  const confirmInput = document.getElementById('confirmPassword');
  const toggleConfirmBtn = document.getElementById('toggleConfirmPassword');
  toggleConfirmBtn.addEventListener('click', () => {
      const isPassword = confirmInput.type === 'password';
      confirmInput.type = isPassword ? 'text' : 'password';
      // Change l’icône
      const icon = toggleConfirmBtn.querySelector('i');
      icon.classList.toggle('bi-eye');
      icon.classList.toggle('bi-eye-slash');
  });

  // === Validation & soumission du formulaire ===
  signupForm.addEventListener('submit', (e) => {
      e.preventDefault();

      // Vérifier la correspondance des mots de passe
      if (passwordInput.value !== confirmInput.value) {
          confirmInput.setCustomValidity("Les mots de passe ne correspondent pas.");
      } else {
          confirmInput.setCustomValidity("");
      }

      // Forcer la validation côté client
      if (!signupForm.checkValidity()) {
          signupForm.classList.add('was-validated');
          return;
      }

      // Formulaire valide
      console.log("Formulaire d'inscription soumis !");

      // Création des données du formulaire
      const formData = new FormData(signupForm);

      // Envoi des données au backend
      fetch('https://localhost:8443/auth/signup/', { // Chemin vers votre endpoint backend
          method: 'POST',
          body: formData,
      })
      .then(response => response.json())
      .then(data => {
          if (data.success) {
              alert(data.detail); // Affiche un message de succès
              window.location.href = '/index.html'; // Redirige vers la page de confirmation
          } else {
              alert(`Erreur : ${data.error}`); // Affiche un message d'erreur
          }
      })
      .catch(err => {
          console.error("Erreur réseau :", err);
          alert("Une erreur réseau s'est produite. Veuillez réessayer plus tard.");
      });
  });
});
# Utiliser une image Python légère
FROM python:3.10-alpine

# Créer un répertoire de travail
WORKDIR /app

# Installer les dépendances système nécessaires
RUN apk update && apk add --no-cache \
    postgresql-client \              
    postgresql-dev \                 
    gcc \                            
    musl-dev \                       
    libffi-dev \                     
    openssl-dev \                    
    zlib-dev \                       
    jpeg-dev \                       
    freetype-dev \                   
    lcms2-dev \                      
    tiff-dev \                       
    py3-pip \                        
    python3-dev \                    
    build-base \                     
    curl \                           
    bash                            


# Copier les fichiers de configuration
COPY requirements.txt .

# Installer les dépendances Python
RUN pip install --no-cache-dir -r requirements.txt

# Nettoyer le cache pour réduire la taille de l'image
RUN apk del gcc musl-dev libffi-dev openssl-dev && rm -rf /var/cache/apk/*

# Copier le code source du backend
COPY . /app

# Exposer le port 8000
EXPOSE 8000

# Lancer le serveur Django
CMD ["sh", "-c", "while ! nc -z db 5432; do sleep 1; done; python manage.py migrate && python manage.py runserver 0.0.0.0:8000"]
#!/usr/bin/env python
import os
import sys

def main():
    """Point d'entrée principal pour les commandes Django."""
    # Définit les paramètres du projet Django
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'conecte_me_backend.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Impossible d'importer Django. Assurez-vous qu'il est installé "
            "et que le virtualenv est activé. Consultez les dépendances "
            "dans requirements.txt."
        ) from exc
    execute_from_command_line(sys.argv)

if __name__ == '__main__':
    main()
Django==4.2
djangorestframework==3.14.0
psycopg2-binary==2.9.6
PyJWT==2.8.0
requests==2.31.0
python-decouple==3.8  # Ajouté pour une meilleure gestion des variables d'environnement
django-oauth-toolkit==2.0.0


import os
from pathlib import Path
import logging


# Définition du répertoire de base du projet
BASE_DIR = Path(__file__).resolve().parent.parent

# Clé secrète (à garder secrète en production)
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'unsafe-secret-key')

# Mode débogage
DEBUG = os.environ.get('DEBUG', '1') == '1'

# Configuration des hôtes autorisés
ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Applications installées
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Applications tierces
    'rest_framework',
    'oauth2_provider',

    # Applications personnalisées
    'oauth_app',
]

# Middleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Configuration des URL
ROOT_URLCONF = 'conecte_me_backend.urls'

# Configuration des templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Configuration WSGI
WSGI_APPLICATION = 'conecte_me_backend.wsgi.application'

# Configuration de la base de données
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', 'conecteme_db'),
        'USER': os.environ.get('POSTGRES_USER', 'conecteme_user'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'conecteme_password'),
        'HOST': os.environ.get('POSTGRES_HOST', 'db'),
        'PORT': os.environ.get('POSTGRES_PORT', '5432'),
    }
}

# Configuration des mots de passe
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Paramètres de localisation
LANGUAGE_CODE = 'fr-fr'
TIME_ZONE = 'Europe/Paris'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Configuration des fichiers statiques
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Configuration des fichiers médias
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Configuration des backends d'authentification
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'oauth2_provider.backends.OAuth2Backend',
)

# Configuration des paramètres OAuth2
OAUTH2_PROVIDER = {
    'ACCESS_TOKEN_EXPIRE_SECONDS': 3600,
    'AUTHORIZATION_CODE_EXPIRE_SECONDS': 600,
    'OAUTH2_BACKEND_CLASS': 'oauth2_provider.oauth2_backends.OAuthLibCore',
    'OAUTH2_VALIDATOR_CLASS': 'oauth2_provider.oauth2_validators.OAuth2Validator',
    'SCOPES': {'public': 'Accès public'},
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    ),
}

# Configuration des informations client OAuth2
OAUTH42_WEBSITE = 'https://localhost:8443'
OAUTH42_CLIENT_ID = 'u-s4t2ud-212adcc9d7bcdde9f1b4072ac7e13a17ce8c3493475514c9c139b3f993a243a6'
OAUTH42_CLIENT_SECRET = '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'
OAUTH42_REDIRECT_URI = 'https://localhost:8443/auth/42/callback'
OAUTH42_AUTH_URL = 'https://api.intra.42.fr/oauth/authorize'
OAUTH42_TOKEN_URL = 'https://api.intra.42.fr/oauth/token'
OAUTH42_USER_URL = 'https://api.intra.42.fr/v2/me'

# Configuration des e-mails
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'webmaster@localhost'

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
logger.debug(f"Connecting to DB: {DATABASES['default']}")
from django.contrib import admin
from django.urls import path, include
from oauth_app import views  # Remplacez par le nom correct de l'application contenant la vue


urlpatterns = [
    path('admin/', admin.site.urls),
    path('auth/42/', include('oauth_app.urls')),  # Routes d’auth OAuth 42
    path('auth/signup/', views.signup_view, name='signup'),  # Ajoutez cette ligne
]
import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'conecte_me_backend.settings')

application = get_wsgi_application()
from django.db import models
from django.contrib.auth.hashers import make_password

class User42(models.Model):
    user_id = models.IntegerField(unique=True)
    username = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)
    first_name = models.CharField(max_length=50, null=False, default="Unknown")
    email_address = models.EmailField(unique=True, null=False, default="placeholder@example.com")
    password = models.CharField(max_length=128, null=False, default="to_be_hashed")

    def __str__(self):
        return f"{self.username} ({self.email_address})"

    def set_password(self, raw_password: str):
        self.password = make_password(raw_password)
from django.urls import path
from django.http import HttpResponse  # Import de HttpResponse
from .views import redirect_to_42, callback_42
from . import views


def login_view(request):
    return HttpResponse("Login page")

urlpatterns = [
    path('signup/', views.signup_view, name='signup'),
    path('login-42/', redirect_to_42, name='redirect_to_42'),
    path('callback', callback_42, name='callback_42'),
]
import os
import jwt
import datetime

def generate_jwt(user_id, username):
    secret_key = os.environ.get('SECRET_KEY', 'unsafe-default-key')
    expiration = datetime.datetime.utcnow() + datetime.timedelta(hours=1)
    payload = {
        'user_id': user_id,
        'username': username,
        'exp': expiration,
        'iss': 'ConecteMe'
    }
    token = jwt.encode(payload, secret_key, algorithm='HS256')
    return token
import os
import requests
import jwt
from django.shortcuts import redirect, render
from django.http import JsonResponse, HttpResponseRedirect
from django.urls import reverse
from django.utils.crypto import get_random_string
from .utils import generate_jwt

from django.contrib import messages

from django.db import IntegrityError, transaction

from django.views.decorators.csrf import csrf_exempt
from django.middleware.csrf import get_token
from django.contrib.auth.hashers import check_password
from .models import User42
from django.contrib.auth.hashers import make_password


# Récupération des variables d'env
CLIENT_ID = os.environ.get('OAUTH42_CLIENT_ID')
CLIENT_SECRET = os.environ.get('OAUTH42_CLIENT_SECRET')
REDIRECT_URI = os.environ.get('OAUTH42_REDIRECT_URI')
TOKEN_URL = "https://api.intra.42.fr/oauth/token"
AUTHORIZE_URL = "https://api.intra.42.fr/oauth/authorize"

def redirect_to_42(request):
    """
    Redirige vers la page d'authentification 42 en utilisant
    Authorization Code Grant. On génère un state random pour la protection CSRF.
    """
    state = get_random_string(32)
    request.session['oauth_state'] = state

    params = {
        'client_id': CLIENT_ID,
        'redirect_uri': REDIRECT_URI,
        'response_type': 'code',
        'scope': 'public',
        'state': state,
    }
    # Construction de l'URL d'authentification
    query_string = "&".join([f"{k}={v}" for k, v in params.items()])
    auth_url = f"{AUTHORIZE_URL}?{query_string}"
    return redirect(auth_url)


def callback_42(request):
    """
    Gère le callback après authentification 42.
    Échange le code reçu contre un token, puis récupère les infos utilisateur.
    """
    # Vérification du state
    state_session = request.session.get('oauth_state')
    state_request = request.GET.get('state')
    if not state_session or state_session != state_request:
        return JsonResponse({"error": "Invalid state"}, status=400)

    code = request.GET.get('code')
    if not code:
        return JsonResponse({"error": "No code provided"}, status=400)

    # Échange code -> access token
    data = {
        'grant_type': 'authorization_code',
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'code': code,
        'redirect_uri': REDIRECT_URI,
    }
    try:
        response = requests.post(TOKEN_URL, data=data)
        token_data = response.json()
        access_token = token_data.get('access_token')
        if not access_token:
            return JsonResponse({"error": "Failed to retrieve access token"}, status=400)
    except Exception as e:
        return JsonResponse({"error": str(e)}, status=400)

    # Récupération des infos utilisateur depuis l'API 42
    user_info_url = "https://api.intra.42.fr/v2/me"
    headers = {
        'Authorization': f"Bearer {access_token}"
    }
    user_resp = requests.get(user_info_url, headers=headers)
    if user_resp.status_code != 200:
        return JsonResponse({"error": "Failed to retrieve user info"}, status=400)

    user_data = user_resp.json()
    user_id_42 = user_data['id']
    user_name_42 = user_data['login']

    # Stocker ou mettre à jour l'utilisateur en base
    user, _ = User42.objects.get_or_create(
        user_id=user_id_42,
        defaults={'username': user_name_42}
    )

    # Générer un JWT pour la session
    jwt_token = generate_jwt(user_id=user_id_42, username=user_name_42)

    # Redirection côté frontend, transmettant le token ou un paramètre signifiant succès
    # On peut stocker le token dans un cookie HttpOnly (plus sûr), ou dans un paramètre GET
    response = HttpResponseRedirect(f"https://localhost:8443/game_interface.html?jwt={jwt_token}")
    return response

@csrf_exempt
def signup_view(request):
    if request.method == 'POST':
        # Récupération des données depuis la requête POST
        first_name = request.POST.get('firstname')
        email = request.POST.get('email')
        raw_password = request.POST.get('password')
        pseudo = request.POST.get('pseudo', '')

        # Validation des champs
        if not all([first_name, email, raw_password]):
            return JsonResponse({"success": False, "error": "Tous les champs requis ne sont pas remplis."}, status=400)
        try:
            with transaction.atomic():
                user = User42(
                    user_id=0,  # Placeholder pour le moment
                    username=pseudo or email.split('@')[0],
                    first_name=first_name,
                    email_address=email,
                )
                user.password = make_password(raw_password)  # Hash du mot de passe
                user.save()
        except IntegrityError:
            return JsonResponse({"success": False, "error": "Cette adresse e-mail est déjà utilisée."}, status=400)

        # Succès de l'inscription
        return JsonResponse({"success": True, "detail": "Inscription réussie."}, status=201)

    # Méthode non autorisée
    return JsonResponse({"success": False, "error": "Méthode non autorisée."}, status=405)