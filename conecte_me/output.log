Starting docker-compose down...
Container conecteme_proxy  Stopping
Container conecteme_proxy  Stopping
Container conecteme_proxy  Stopped
Container conecteme_proxy  Removing
Container conecteme_proxy  Removed
Container conecteme_frontend  Stopping
Container conecteme_frontend  Stopping
Container conecteme_frontend  Stopped
Container conecteme_frontend  Removing
Container conecteme_frontend  Removed
Container conecteme_backend  Stopping
Container conecteme_backend  Stopping
Container conecteme_backend  Stopped
Container conecteme_backend  Removing
Container conecteme_backend  Removed
Container conecteme_db  Stopping
Container conecteme_db  Stopping
Container conecteme_db  Stopped
Container conecteme_db  Removing
Container conecteme_db  Removed
Volume conecte_me_postgres_data  Removing
Network conecte_me_conecteme_network  Removing
Volume conecte_me_postgres_data  Removed
Network conecte_me_conecteme_network  Removed
Tree structure:
.
├── backend
│   ├── conecte_me_backend
│   │   ├── __init__.py
│   │   ├── __pycache__
│   │   │   ├── __init__.cpython-310.pyc
│   │   │   ├── settings.cpython-310.pyc
│   │   │   └── urls.cpython-310.pyc
│   │   ├── settings.py
│   │   ├── urls.py
│   │   └── wsgi.py
│   ├── Dockerfile
│   ├── manage.py
│   ├── oauth_app
│   │   ├── __init__.py
│   │   ├── migrations
│   │   │   ├── 0001_initial.py
│   │   │   ├── 0002_user42_email_address_user42_first_name_and_more.py
│   │   │   ├── __init__.py
│   │   │   └── __pycache__
│   │   │       ├── 0001_initial.cpython-310.pyc
│   │   │       ├── 0002_user42_email_address_user42_first_name_and_more.cpython-310.pyc
│   │   │       └── __init__.cpython-310.pyc
│   │   ├── models.py
│   │   ├── __pycache__
│   │   │   ├── __init__.cpython-310.pyc
│   │   │   ├── models.cpython-310.pyc
│   │   │   ├── tests.cpython-310.pyc
│   │   │   ├── urls.cpython-310.pyc
│   │   │   ├── utils.cpython-310.pyc
│   │   │   └── views.cpython-310.pyc
│   │   ├── tests.py
│   │   ├── urls.py
│   │   ├── utils.py
│   │   └── views.py
│   └── requirements.txt
├── certs
│   ├── localhost.crt
│   └── localhost.key
├── docker-compose.yml
├── frontend
│   ├── confirmation.html
│   ├── Dockerfile
│   ├── index.html
│   ├── signup.html
│   └── static
│       ├── css
│       │   ├── main.css
│       │   └── signup.css
│       ├── img
│       │   ├── 42_logo.png
│       │   ├── Game_anime.png
│       │   ├── PONG_Accueil.png
│       │   ├── PONG_seul.png
│       │   └── User_title.png
│       └── js
│           ├── main.js
│           └── signup.js
├── nginx.conf
├── output.log
└── README.md

13 directories, 47 files
Backend OAuth App:
from django.db import models
from django.contrib.auth.hashers import make_password

class User42(models.Model):
    user_id = models.IntegerField(unique=True)
    username = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)
    first_name = models.CharField(max_length=50, null=False, default="Unknown")
    email_address = models.EmailField(unique=True, null=False, default="placeholder@example.com")
    password = models.CharField(max_length=128, null=False, default="to_be_hashed")

    def __str__(self):
        return f"{self.username} ({self.email_address})"

    def set_password(self, raw_password: str):
        self.password = make_password(raw_password)
import os
import jwt
import datetime

def generate_jwt(user_id, username):
    secret_key = os.environ.get('SECRET_KEY', 'unsafe-default-key')
    expiration = datetime.datetime.utcnow() + datetime.timedelta(hours=1)
    payload = {
        'user_id': user_id,
        'username': username,
        'exp': expiration,
        'iss': 'ConecteMe'
    }
    token = jwt.encode(payload, secret_key, algorithm='HS256')
    return token
from django.urls import path
from django.http import HttpResponse  # Import de HttpResponse
from .views import redirect_to_42, callback_42
from . import views


def login_view(request):
    return HttpResponse("Login page")

urlpatterns = [
    path('signup/', views.signup_view, name='signup'),
    path('login-42/', redirect_to_42, name='redirect_to_42'),
    path('callback', callback_42, name='callback_42'),
]
import os
import requests
import jwt
from django.shortcuts import redirect, render
from django.http import JsonResponse, HttpResponseRedirect
from django.urls import reverse
from django.utils.crypto import get_random_string
from .utils import generate_jwt

from django.contrib import messages

from django.db import IntegrityError, transaction

from django.views.decorators.csrf import csrf_exempt
from django.middleware.csrf import get_token
from django.contrib.auth.hashers import check_password
from .models import User42
from django.contrib.auth.hashers import make_password


# Récupération des variables d'env
CLIENT_ID = os.environ.get('OAUTH42_CLIENT_ID')
CLIENT_SECRET = os.environ.get('OAUTH42_CLIENT_SECRET')
REDIRECT_URI = os.environ.get('OAUTH42_REDIRECT_URI')
TOKEN_URL = "https://api.intra.42.fr/oauth/token"
AUTHORIZE_URL = "https://api.intra.42.fr/oauth/authorize"

def redirect_to_42(request):
    """
    Redirige vers la page d'authentification 42 en utilisant
    Authorization Code Grant. On génère un state random pour la protection CSRF.
    """
    state = get_random_string(32)
    request.session['oauth_state'] = state

    params = {
        'client_id': CLIENT_ID,
        'redirect_uri': REDIRECT_URI,
        'response_type': 'code',
        'scope': 'public',
        'state': state,
    }
    # Construction de l'URL d'authentification
    query_string = "&".join([f"{k}={v}" for k, v in params.items()])
    auth_url = f"{AUTHORIZE_URL}?{query_string}"
    return redirect(auth_url)


def callback_42(request):
    """
    Gère le callback après authentification 42.
    Échange le code reçu contre un token, puis récupère les infos utilisateur.
    """
    # Vérification du state
    state_session = request.session.get('oauth_state')
    state_request = request.GET.get('state')
    if not state_session or state_session != state_request:
        return JsonResponse({"error": "Invalid state"}, status=400)

    code = request.GET.get('code')
    if not code:
        return JsonResponse({"error": "No code provided"}, status=400)

    # Échange code -> access token
    data = {
        'grant_type': 'authorization_code',
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'code': code,
        'redirect_uri': REDIRECT_URI,
    }
    try:
        response = requests.post(TOKEN_URL, data=data)
        token_data = response.json()
        access_token = token_data.get('access_token')
        if not access_token:
            return JsonResponse({"error": "Failed to retrieve access token"}, status=400)
    except Exception as e:
        return JsonResponse({"error": str(e)}, status=400)

    # Récupération des infos utilisateur depuis l'API 42
    user_info_url = "https://api.intra.42.fr/v2/me"
    headers = {
        'Authorization': f"Bearer {access_token}"
    }
    user_resp = requests.get(user_info_url, headers=headers)
    if user_resp.status_code != 200:
        return JsonResponse({"error": "Failed to retrieve user info"}, status=400)

    user_data = user_resp.json()
    user_id_42 = user_data['id']
    user_name_42 = user_data['login']

    # Stocker ou mettre à jour l'utilisateur en base
    user, _ = User42.objects.get_or_create(
        user_id=user_id_42,
        defaults={'username': user_name_42}
    )

    # Générer un JWT pour la session
    jwt_token = generate_jwt(user_id=user_id_42, username=user_name_42)

    # Redirection côté frontend, transmettant le token ou un paramètre signifiant succès
    # On peut stocker le token dans un cookie HttpOnly (plus sûr), ou dans un paramètre GET
    response = HttpResponseRedirect(f"https://localhost:8443/?jwt={jwt_token}")
    return response

@csrf_exempt
def signup_view(request):
    if request.method == 'POST':
        # Récupération des données depuis la requête POST
        first_name = request.POST.get('firstname')
        email = request.POST.get('email')
        raw_password = request.POST.get('password')
        pseudo = request.POST.get('pseudo', '')

        # Validation des champs
        if not all([first_name, email, raw_password]):
            return JsonResponse({"success": False, "error": "Tous les champs requis ne sont pas remplis."}, status=400)
        try:
            with transaction.atomic():
                user = User42(
                    user_id=0,  # Placeholder pour le moment
                    username=pseudo or email.split('@')[0],
                    first_name=first_name,
                    email_address=email,
                )
                user.password = make_password(raw_password)  # Hash du mot de passe
                user.save()
        except IntegrityError:
            return JsonResponse({"success": False, "error": "Cette adresse e-mail est déjà utilisée."}, status=400)

        # Succès de l'inscription
        return JsonResponse({"success": True, "detail": "Inscription réussie."}, status=201)

    # Méthode non autorisée
    return JsonResponse({"success": False, "error": "Méthode non autorisée."}, status=405)Backend Migrations:
# Generated by Django 5.1.4 on 2025-01-11 10:26

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User42',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(unique=True)),
                ('username', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
    ]
# Generated by Django 5.1.4 on 2025-01-22 10:42

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('oauth_app', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='user42',
            name='email_address',
            field=models.EmailField(default='placeholder@example.com', max_length=254, unique=True),
        ),
        migrations.AddField(
            model_name='user42',
            name='first_name',
            field=models.CharField(default='Unknown', max_length=50),
        ),
        migrations.AddField(
            model_name='user42',
            name='password',
            field=models.CharField(default='to_be_hashed', max_length=128),
        ),
    ]
Backend Conecte Me:
import os
from pathlib import Path
import logging


# Définition du répertoire de base du projet
BASE_DIR = Path(__file__).resolve().parent.parent

# Clé secrète (à garder secrète en production)
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'unsafe-secret-key')

# Mode débogage
DEBUG = os.environ.get('DEBUG', '1') == '1'

# Configuration des hôtes autorisés
ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Applications installées
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Applications tierces
    'rest_framework',
    'oauth2_provider',

    # Applications personnalisées
    'oauth_app',
]

# Middleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Configuration des URL
ROOT_URLCONF = 'conecte_me_backend.urls'

# Configuration des templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Configuration WSGI
WSGI_APPLICATION = 'conecte_me_backend.wsgi.application'

# Configuration de la base de données
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', 'conecteme_db'),
        'USER': os.environ.get('POSTGRES_USER', 'conecteme_user'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'conecteme_password'),
        'HOST': os.environ.get('POSTGRES_HOST', 'db'),
        'PORT': os.environ.get('POSTGRES_PORT', '5432'),
    }
}

# Configuration des mots de passe
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Paramètres de localisation
LANGUAGE_CODE = 'fr-fr'
TIME_ZONE = 'Europe/Paris'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Configuration des fichiers statiques
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Configuration des fichiers médias
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Configuration des backends d'authentification
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'oauth2_provider.backends.OAuth2Backend',
)

# Configuration des paramètres OAuth2
OAUTH2_PROVIDER = {
    'ACCESS_TOKEN_EXPIRE_SECONDS': 3600,
    'AUTHORIZATION_CODE_EXPIRE_SECONDS': 600,
    'OAUTH2_BACKEND_CLASS': 'oauth2_provider.oauth2_backends.OAuthLibCore',
    'OAUTH2_VALIDATOR_CLASS': 'oauth2_provider.oauth2_validators.OAuth2Validator',
    'SCOPES': {'public': 'Accès public'},
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    ),
}

# Configuration des informations client OAuth2
OAUTH42_WEBSITE = 'https://localhost:8443'
OAUTH42_CLIENT_ID = 'u-s4t2ud-212adcc9d7bcdde9f1b4072ac7e13a17ce8c3493475514c9c139b3f993a243a6'
OAUTH42_CLIENT_SECRET = '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'
OAUTH42_REDIRECT_URI = 'https://localhost:8443/auth/42/callback'
OAUTH42_AUTH_URL = 'https://api.intra.42.fr/oauth/authorize'
OAUTH42_TOKEN_URL = 'https://api.intra.42.fr/oauth/token'
OAUTH42_USER_URL = 'https://api.intra.42.fr/v2/me'

# Configuration des e-mails
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'webmaster@localhost'

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
logger.debug(f"Connecting to DB: {DATABASES['default']}")
from django.contrib import admin
from django.urls import path, include
from oauth_app import views  # Remplacez par le nom correct de l'application contenant la vue


urlpatterns = [
    path('admin/', admin.site.urls),
    path('auth/42/', include('oauth_app.urls')),  # Routes d’auth OAuth 42
    path('auth/signup/', views.signup_view, name='signup'),  # Ajoutez cette ligne
]
Frontend:
FROM nginx:alpine

WORKDIR /usr/share/nginx/html
COPY *.html .
COPY static ./static

# Nginx par défaut écoute sur le port 80
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <title>Créer un compte</title>

    <!-- Bootstrap CSS -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    />
    <!-- Bootstrap Icons -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"
    />
    <!-- Votre CSS personnalisé -->
    <link rel="stylesheet" href="static/css/signup.css" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  </head>
  <body class="bg-light fade-in">
    <!-- Conteneur principal centré verticalement -->
    <div class="container d-flex justify-content-center align-items-center min-vh-100">
      <!-- Card Bootstrap pour faire un joli encadré -->
      <div class="card shadow p-4" style="max-width: 500px; width: 100%;">
        <div class="card-header bg-white text-center">
          <h2 class="mb-0">Créer un compte</h2>
          <p class="text-muted">Entrez vos informations pour commencer</p>
        </div>

        <div class="card-body">
          <form
            id="signup-form"
            action="https://localhost:8443/signup/""
            method="POST"
            class="needs-validation"
            novalidate
            enctype="multipart/form-data"
          >
            <!-- Aperçu Avatar -->
            <div class="mb-3 d-flex justify-content-center">
              <div
                class="position-relative avatar-preview rounded-circle border border-2 border-dashed text-center"
              >
                <!-- Icône caméra (affichée par défaut) -->
                <i
                  class="bi bi-camera"
                  id="camera-icon"
                  style="font-size: 2rem; color: #6c757d;"
                ></i>
                <!-- Image d’aperçu (cachée au départ) -->
                <img
                  id="avatar-img"
                  src="#"
                  alt="Aperçu de l'avatar"
                  class="d-none"
                />
                <!-- Input file en pleine superposition (invisible) -->
                <input
                  type="file"
                  id="avatar"
                  name="avatar"
                  accept="image/*"
                  class="position-absolute w-100 h-100 top-0 start-0 opacity-0"
                  style="cursor: pointer;"
                />
              </div>
            </div>

            <!-- Champ Pseudo -->
            <div class="mb-3">
              <label for="pseudo" class="form-label">Pseudo</label>
              <input
                type="text"
                class="form-control"
                id="pseudo"
                name="pseudo"
                placeholder="johndoe"
                required
                minlength="3"
                maxlength="20"
              />
              <div class="invalid-feedback">
                Le pseudo doit contenir entre 3 et 20 caractères.
              </div>
            </div>

            <!-- Champ Prénom -->
            <div class="mb-3">
              <label for="firstname" class="form-label">Prénom</label>
              <input
                type="text"
                class="form-control"
                id="firstname"
                name="firstname"
                placeholder="John"
                required
                minlength="2"
                maxlength="50"
              />
              <div class="invalid-feedback">
                Le prénom doit contenir entre 2 et 50 caractères.
              </div>
            </div>

            <!-- Champ Email -->
            <div class="mb-3">
              <label for="email" class="form-label">Adresse e-mail</label>
              <input
                type="email"
                class="form-control"
                id="email"
                name="email"
                placeholder="john.doe@example.com"
                required
              />
              <div class="invalid-feedback">
                Veuillez saisir une adresse e-mail valide.
              </div>
            </div>

            <!-- Champ Mot de passe + note d'aide -->
            <div class="mb-3">
              <label for="password" class="form-label">Mot de passe</label>
              <div class="input-group">
                <input
                  type="password"
                  class="form-control"
                  id="password"
                  name="password"
                  required
                  minlength="8"
                  pattern="(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9]).{8,}"
                  placeholder="••••••••"
                />
                <button
                  class="btn btn-outline-secondary"
                  type="button"
                  id="togglePassword"
                >
                  <i class="bi bi-eye"></i>
                </button>
                <div class="invalid-feedback">
                  Le mot de passe doit contenir au moins 8 caractères,
                  une majuscule, une minuscule, un chiffre et un caractère spécial.
                </div>
              </div>
              <small class="form-text text-muted">
                Le mot de passe doit contenir au moins 8 caractères, une majuscule,
                une minuscule, un chiffre et un caractère spécial.
              </small>
            </div>

            <!-- Champ Confirmation du mot de passe -->
            <div class="mb-3">
              <label for="confirmPassword" class="form-label"
                >Confirmer le mot de passe</label
              >
              <div class="input-group">
                <input
                  type="password"
                  class="form-control"
                  id="confirmPassword"
                  name="confirmPassword"
                  required
                  minlength="8"
                  placeholder="••••••••"
                />
                <button
                  class="btn btn-outline-secondary"
                  type="button"
                  id="toggleConfirmPassword"
                >
                  <i class="bi bi-eye"></i>
                </button>
                <div class="invalid-feedback">
                  Les mots de passe ne correspondent pas.
                </div>
              </div>
            </div>

            <!-- Bouton de soumission -->
            <button type="submit" class="btn btn-primary w-100">
              S'inscrire
            </button>
          </form>
        </div>
      </div>
    </div>

    <!-- Bootstrap JS -->
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
    ></script>
    <!-- Script Custom -->
    <script src="static/js/signup.js"></script>
  </body>
</html>
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Pong</title>
    <!-- Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-KyZXEAg3QhqLMpG8r+8fhAXLRfu8m1L/J1Rv2hFpgb8si5+KclW5hqIcWPL6jIoS"
      crossorigin="anonymous"
    />
    <!-- Custom CSS -->
    <link rel="stylesheet" href="static/css/main.css" />
    <!-- Bootstrap Icons -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css"
      rel="stylesheet"
    />
  </head>
  <body class="bg-gradient">
    <!-- Bloc “titre” au-dessus du container -->
    <div class="title-block text-center">
      <!-- Image ou logo “PONG” -->
      <img
        src="/static/img/Game_anime.png"
        alt="Game Title"
        class="img-fluid"
      />
    </div>

    <!-- Container principal (Welcome to Morpion) -->
    <div class="container text-center bg-white shadow-lg rounded p-4 welcome-container">
      <p class="text-muted">Please sign in to continue</p>
      <h1 class="display-6 text-primary"></h1>

      <div class="btn-group w-100 mb-3 d-flex" role="group">
        <button
          id="login-btn"
          class="btn active d-flex align-items-center justify-content-center"
          style="font-size: 16px; flex: 1; border-radius: 9px; border: none;"
        >
          <i class="bi bi-box-arrow-in-right" style="font-size: 20px; margin-right: 8px;"></i>
          Login
        </button>
        <button
          id="signup-btn"
          class="btn d-flex align-items-center justify-content-center"
          style="font-size: 16px; flex: 1; border-radius: 9px; border: none;"
        >
          <i class="bi bi-person-plus" style="font-size: 20px; margin-right: 8px;"></i>
          Sign Up
        </button>
      </div>
      <button id="connect-42" class="auth-button">
        <span>Sign in with</span>    
        <img src="static/img/42_logo.png" alt="42 Logo" />
      </button>
    </div>

    <!-- Bootstrap JS -->
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"
    ></script>
    <!-- Custom JS -->
    <script src="static/js/main.js"></script>
  </body>
</html><!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Confirmation</title>
</head>
<body>
    <h1>Inscription réussie !</h1>
    <p>Merci pour votre inscription. Vous pouvez maintenant vous connecter.</p>
    <!-- <a href="/login.html">Aller à la page de connexion</a> -->
</body>
</html>
cat: login.html: No such file or directory
Static CSS:
cat: login.css: No such file or directory
/* Remise à zéro + style général */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: Arial, sans-serif;
  background: url('/static/img/PONG_Accueil.png') no-repeat center center fixed;
  background-size: cover;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center; /* Centre tout verticalement */
  min-height: 100vh;
  /* On laisse un padding-top pour descendre le bloc principal */
  padding-top: 120px;
  color: #fff;
}

/* Animation de va-et-vient vertical */
@keyframes bounce {
  0%, 100% {
    transform: translateY(0); /* Position initiale et finale */
  }
  50% {
    transform: translateY(-10px); /* Monte de 10px */
  }
}

/* Titre au dessus */
.title-block {
  margin-left: 600px;
  position: relative;
  top: 5cm; /* Descend le bloc de 3 cm */
  position: relative; /* Assurez-vous que l'élément peut être déplacé */
  animation: bounce 1.3s infinite; /* Animation continue */
}

/* Image du titre (Pong) */
.title-block img {
  max-width: 372px;
  height: 138px;
}

/* Container (Welcome to Morpion) */
.welcome-container {
  width: 100%;
  max-width: 400px;
  text-align: center;
  background: #fff;
  color: #4a5568;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  padding: 2rem;
  /* On peut ajouter un petit décalage avec margin-top si besoin */
  margin-top: 3cm; /* Remonte de 2 cm */
  margin-bottom: 5px;
}

/* Boutons, etc. */
button {
  padding: 10px 20px;
  cursor: pointer;
}

.button-group {
  display: flex;
  justify-content: space-around;
  margin-bottom: 1rem;
}

.button-group .active {
  background-color: #5a67d8;
  color: #fff;
}

.button-group button:not(.active) {
  background-color: #efefef;
  color: #4a5568;
}

.button-group button:hover:not(.active) {
  background-color: #e2e8f0;
}

/* Survol des boutons “Login” et “Sign Up” */
#login-btn:hover,
#signup-btn:hover {
  background-color: #d6d6d6;
  color: #4a5568;
  transition: background-color 0.3s ease;
}

/* Clic sur “Login” / “Sign Up” */
#login-btn:active,
#signup-btn:active {
  background-color: #4f46e5;
  color: #ffffff;
  transition: background-color 0.1s ease, color 0.1s;
}

/* Bouton “Continue with 42” */
.auth-button {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  padding: 0.8rem;
  margin-top: 1rem;
  font-size: 1rem;
  font-weight: bold;
  background-color: #2d3748;
  color: #fff;
  border: none;
  border-radius: 7px;
  cursor: pointer;
  transition: background-color 0.2s;
}

.auth-button img {
  margin-right: 0.5rem;
  width: 24px;
  height: 24px;
}

.auth-button:hover {
  background-color: #111827;
}

.text-muted {
  margin-bottom: 4mm; /* Ajoute un espace de 4mm sous le paragraphe */
}/* On importe (ou on utilise via CDN) Bootstrap et Bootstrap Icons dans le HTML,
   donc ici on se limite à nos overrides et classes perso. */

/* Aperçu de l’avatar */
.avatar-preview {
    width: 96px;
    height: 96px;
    overflow: hidden;
    background: #f8f9fa;
    display: flex; /* Ajout */
    align-items: center; /* Ajout */
    justify-content: center; /* Ajout */
    position: relative; /* Assurez-vous que l'icône reste positionnée */
}

#camera-icon {
    font-size: 2rem;
    color: #6c757d;
    position: absolute; /* Si nécessaire pour un positionnement précis */
    top: 50%; /* Centrage vertical */
    left: 50%; /* Centrage horizontal */
    transform: translate(-50%, -50%); /* Ajustement */
    pointer-events: none; /* Pour éviter que l'utilisateur ne clique accidentellement dessus */
}

  /* L'image prend tout l'espace, rognée pour remplir la zone */
  .avatar-preview img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  /* Fond en dégradé clair */
  .bg-light {
    background: linear-gradient(to bottom, #e9ecef, #f8f9fa) !important;
  }
  
  /* Animation fade-in */
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  .fade-in {
    animation: fadeIn 0.3s ease-in;
  }
  
  /* Boutons “œil” (affichage/masquage du mot de passe) */
  .input-group .btn-outline-secondary {
    border-color: #ced4da;
  }
  .input-group .btn-outline-secondary:hover {
    background-color: #f8f9fa;
    border-color: #ced4da;
  }
  
  /* Correction lisibilité des messages d'erreur / aides */
  .invalid-feedback,
  .valid-feedback {
    font-size: 0.875rem;
    margin-top: 0.25rem;
  }
  Static JS:
// main.js

document.addEventListener('DOMContentLoaded', () => {
  const loginBtn = document.getElementById('login-btn');
  const signupBtn = document.getElementById('signup-btn');
  const connect42Btn = document.getElementById('connect-42');

  // ====== GESTION DU BOUTON LOGIN ======
  if (loginBtn) {
    loginBtn.addEventListener('click', () => {
      // Ajoute la classe d’état "active"
      loginBtn.classList.add('btn-primary');
      signupBtn?.classList.remove('btn-primary');
      // Ici, vous pouvez rediriger, afficher un modal, etc.
      console.log("Login button clicked");
    });
  }

  // ====== GESTION DU BOUTON SIGNUP ======
  if (signupBtn) {
    signupBtn.addEventListener('click', () => {
      // Ajoute la classe d’état "active"
      signupBtn.classList.add('btn-primary');
      loginBtn?.classList.remove('btn-primary');

      // EXEMPLE : rediriger vers une page signup.html
      // (À créer ou à remplacer par votre propre route)
      window.location.href = 'signup.html';
    });
  }

  // ====== GESTION DU BOUTON "CONNECT-42" ======
  if (connect42Btn) {
    connect42Btn.addEventListener('click', () => {
      // Redirection vers l'endpoint OAuth 42
      // Adaptez l'URL si nécessaire
      window.location.href = 'https://localhost:8443/auth/42/login-42/';
    });
  }

  // ====== GESTION DE LA RÉCUPÉRATION DU JWT (SI RETOUR OAUTH) ======
  const urlParams = new URLSearchParams(window.location.search);
  const jwt = urlParams.get('jwt');
  if (jwt) {
    const container = document.querySelector('.container');
    if (container) {
      container.innerHTML = `
        <p class="text-success">
          Authentification réussie ! Votre token est : ${jwt}
        </p>
      `;
    }
  }
});
document.addEventListener('DOMContentLoaded', () => {
  const signupForm = document.getElementById('signup-form');

  // === Aperçu de l'avatar ===
  const avatarInput = document.getElementById('avatar');
  const avatarImg = document.getElementById('avatar-img');
  const cameraIcon = document.getElementById('camera-icon');

  avatarInput.addEventListener('change', (e) => {
      const file = e.target.files && e.target.files[0];
      if (file) {
          const reader = new FileReader();
          reader.onload = (event) => {
              avatarImg.src = event.target.result;
              avatarImg.classList.remove('d-none');
              cameraIcon.classList.add('d-none');
          };
          reader.readAsDataURL(file);
      } else {
          // Remettre à zéro
          avatarImg.src = '#';
          avatarImg.classList.add('d-none');
          cameraIcon.classList.remove('d-none');
      }
  });

  // === Affichage/masquage du mot de passe ===
  const passwordInput = document.getElementById('password');
  const togglePasswordBtn = document.getElementById('togglePassword');
  togglePasswordBtn.addEventListener('click', () => {
      const isPassword = passwordInput.type === 'password';
      passwordInput.type = isPassword ? 'text' : 'password';
      // Change l’icône
      const icon = togglePasswordBtn.querySelector('i');
      icon.classList.toggle('bi-eye');
      icon.classList.toggle('bi-eye-slash');
  });

  const confirmInput = document.getElementById('confirmPassword');
  const toggleConfirmBtn = document.getElementById('toggleConfirmPassword');
  toggleConfirmBtn.addEventListener('click', () => {
      const isPassword = confirmInput.type === 'password';
      confirmInput.type = isPassword ? 'text' : 'password';
      // Change l’icône
      const icon = toggleConfirmBtn.querySelector('i');
      icon.classList.toggle('bi-eye');
      icon.classList.toggle('bi-eye-slash');
  });

  // === Validation & soumission du formulaire ===
  signupForm.addEventListener('submit', (e) => {
      e.preventDefault();

      // Vérifier la correspondance des mots de passe
      if (passwordInput.value !== confirmInput.value) {
          confirmInput.setCustomValidity("Les mots de passe ne correspondent pas.");
      } else {
          confirmInput.setCustomValidity("");
      }

      // Forcer la validation côté client
      if (!signupForm.checkValidity()) {
          signupForm.classList.add('was-validated');
          return;
      }

      // Formulaire valide
      console.log("Formulaire d'inscription soumis !");

      // Création des données du formulaire
      const formData = new FormData(signupForm);

      // Envoi des données au backend
      fetch('https://localhost:8443/auth/signup/', { // Chemin vers votre endpoint backend
          method: 'POST',
          body: formData,
      })
      .then(response => response.json())
      .then(data => {
          if (data.success) {
              alert(data.detail); // Affiche un message de succès
              window.location.href = '/confirmation.html'; // Redirige vers la page de confirmation
          } else {
              alert(`Erreur : ${data.error}`); // Affiche un message d'erreur
          }
      })
      .catch(err => {
          console.error("Erreur réseau :", err);
          alert("Une erreur réseau s'est produite. Veuillez réessayer plus tard.");
      });
  });
});
cat: login.js: No such file or directory
